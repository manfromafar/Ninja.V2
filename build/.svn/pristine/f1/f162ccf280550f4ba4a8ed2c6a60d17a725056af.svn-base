/*
		Create table Blocks (
			blockID						bigint unsigned not null unique,
			first_seen_when				timestamp not null default current_timestamp,
			best_nonce_account_id		bigint unsigned,
			generator_account_id		bigint unsigned,
			block_reward				bigint unsigned,
			is_our_block				boolean not null default false,
			has_been_shared				boolean not null default false,
			base_target					bigint unsigned,
			forged_when					timestamp null default null,
			scoop						bigint unsigned,
			nonce						bigint unsigned,
			gensig						varchar(64),
			deadline					bigint unsigned,
			our_best_deadline			bigint unsigned,
			primary key					(blockID),
			index						(is_our_block, has_been_shared)
		);
*/

#include "Nonce.hpp"
#include "Share.hpp"
#include "Reward.hpp"

#include "mining-info.hpp"

#include <math.h>

#include "Block.cxx"


SEARCHMOD( after_blockID, uint64_t );
SEARCHMOD( before_blockID, uint64_t );

CHILD_OBJECTS(Nonce, block_nonces);
CHILD_OBJECTS(Share, block_shares);
CHILD_OBJECTS(Reward, block_rewards);



SEARCHPREP {
	SEARCHPREP_SUPER;

	if ( SEARCHMOD_IS_SET(after_blockID) ) {
		IDB::Where *new_clause = new IDB::sqlGtUInt64( "Blocks.blockID", SEARCHMOD_VALUE(after_blockID) );
		SEARCHPREP_ADD( new_clause );
	}

	if ( SEARCHMOD_IS_SET(before_blockID) ) {
		IDB::Where *new_clause = new IDB::sqlLtUInt64( "blockID", SEARCHMOD_VALUE(before_blockID) );
		SEARCHPREP_ADD( new_clause );
	}

	SEARCHPREP_END;
}



STATIC Nonce *Block::find_best_nonce( uint64_t blockID ) {
	Nonce nonces;
	nonces.blockID( blockID );
	nonces.is_blocks_best_deadline(true);

	return nonces.present();
}


STATIC void Block::recalculate_shares( uint64_t blockID ) {
	IO::Object::start_transaction();

	Nonce nonces;
	nonces.blockID(blockID);
	nonces.is_accounts_best_deadline(true);
	nonces.search();

	uint64_t total_deadlines = 0;
	std::vector<uint64_t> deadlines;
	std::vector<Nonce *> nonces_to_share;

	while( Nonce *nonce = nonces.result() ) {
		total_deadlines += nonce->deadline();
		deadlines.push_back( nonce->deadline() );
		nonces_to_share.push_back( nonce );
	}

	std::vector<double> shares;
	double total_shares = 0;

	for( uint64_t deadline : deadlines ) {
		// it's actually possible (although rare) for deadline to be zero!
		if (deadline == 0)
			deadline = 1;

		double share = total_deadlines / deadline;
		shares.push_back( share );
		total_shares += share;
	}

	// wipe old shares
	Share old_shares;
	old_shares.blockID(blockID);
	old_shares.search_and_destroy();

	for(int i=0; i<nonces_to_share.size(); i++) {
		Nonce *nonce = nonces_to_share[i];
		double share_fraction = shares[i] / total_shares;

		Share share;
		share.blockID(blockID);
		share.accountID( nonce->accountID() );
		share.share_fraction( share_fraction );
		share.deadline( nonce->deadline() );
		share.deadline_string( nonce->deadline_string() );
		share.save();

		delete nonce;
	}

	IO::Object::commit();
}


void Block::reward_miners() {
	IO::Object::start_transaction();

	refresh();

	if ( is_our_block() && !has_been_shared() ) {
		uint64_t reward_to_share = block_reward() * BURST_TO_NQT;
		std::cout << "[rewards] reward to share: " << reward_to_share << std::endl;

		// 50% of leftover reward to be distributed using this block's shares only
		// and 50% based on historic shares
		// to reward winning miner AND big miners!

		// remove fees, etc. from potential reward to be shared
		uint64_t pool_fee = reward_to_share * POOL_FEE;

		reward_to_share -= pool_fee;

		Share current_shares;
		current_shares.blockID( blockID() );

		uint64_t transaction_fees = current_shares.count() * PAYMENT_SEND_FEE;
		reward_to_share -= transaction_fees;

		Share *historic_shares = Share::historic_shares( blockID(), HISTORIC_BLOCK_COUNT );

		std::cout << "[rewards] pool fee: " << pool_fee << ", max transaction fees: " << transaction_fees << ", reward leftover: " << reward_to_share << std::endl;

		uint64_t total_rewarded = 0;

		std::map<uint64_t,Reward *> rewards_by_accountID;

		current_shares.search();
		while( Share *share = current_shares.result() ) {
			uint64_t amount = reward_to_share * share->share_fraction() / 2.0;

			Reward *reward = new Reward();
			reward->amount( amount );
			reward->message( "Reward for your help with block " + std::to_string( blockID() ) + ": " + std::to_string( amount / ((double)BURST_TO_NQT) ) + "\n" );

			rewards_by_accountID[ share->accountID() ] = reward;

			std::cout << "[rewards] finding fee " << std::to_string( amount ) << " to " << std::to_string( share->accountID() ) << std::endl;

			delete share;
		}

		historic_shares->search();
		while( Share *share = historic_shares->result() ) {
			uint64_t amount = reward_to_share * share->share_fraction() / 2.0;

			if ( rewards_by_accountID.find( share->accountID() ) == rewards_by_accountID.end() )
				rewards_by_accountID[ share->accountID() ] = new Reward();

			Reward *reward = rewards_by_accountID[ share->accountID() ];
			reward->amount( reward->amount() + amount );
			reward->message( reward->message() + "Reward for your help with recent historic blocks: " + std::to_string( amount / ((double)BURST_TO_NQT) ) + "\n" );

			std::cout << "[rewards] historic fee " << std::to_string( amount ) << " to " << std::to_string( share->accountID() ) << std::endl;

			delete share;
		}
		delete historic_shares;

		for(auto it : rewards_by_accountID) {
			Reward *reward = it.second;

			// strip trailing \n on message
			std::string message = reward->message();
			if ( message[message.length() - 1] == '\n' ) {
				message.erase( message.length() - 1);
				reward->message( message );
			}

			reward->blockID( blockID() );
			reward->accountID( it.first );
			reward->save();

			std::cout << "[rewards] account " << reward->accountID() << " reward is: " << reward->amount() << std::endl;
			total_rewarded += reward->amount();

			delete reward;
		}

		has_been_shared(true);
		save();

		std::cout << "[rewards] total rewards (excluding fees): " << total_rewarded << std::endl;
	}

	IO::Object::commit();
}


STATIC uint64_t Block::reward_per_pie() {
	// works even if prev_block_reward is 0
	return ( mining_info_cache.prev_block_reward * (1 - POOL_FEE) ) / 2.0;
}
