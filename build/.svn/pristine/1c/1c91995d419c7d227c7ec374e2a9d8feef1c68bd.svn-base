#include "Account.hpp"
#include "Block.hpp"

#include "API/submitNonce.hpp"
#include "webAPI/updates.hpp"
#include <pthread.h>
#include <signal.h>
#include <regex>

#include "cJSON.hpp"

#include "mining-info.hpp"
#include "remote.hpp"

#ifdef DEBUG_WITH_DMALLOC
#include "dmalloc.h"
#endif


STATIC int Handlers::API::submitNonce::inner( struct MHD_Connection *connection, Request *req, Response *resp ) {
	std::unique_ptr<Block> latest_block( Block::latest_block() );

	time_t start_time = latest_block->first_seen_when();

	/*
	 * XXX I don't think we even need to enforce POST
		if (req->method != POST) {
			resp->status_code = 403;
			resp->content = json_error(1001, "submitNonce request type only available via POST.");
			return MHD_YES;
		}
	*
	*/

	std::string nonce_s = req->get_query_or_post("nonce");

	if ( nonce_s.empty() ) {
		resp->status_code = 400;
		resp->content = json_error(1002, "submitNonce request missing 'nonce' parameter");
		std::cout << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}
	uint64_t nonce = safe_strtoull( nonce_s );

	uint64_t account_id = safe_strtoull( req->get_query_or_post("accountId") );

	if ( account_id == 0 ) {
		resp->status_code = 400;
		resp->content = json_error(1003, "submitNonce request missing 'accountId' parameter - or were you trying to solo mine?");
		std::cout << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	uint64_t blockID = safe_strtoull( req->get_query_or_post("block") );
	if (blockID) {
		if ( blockID != latest_block->blockID() ) {
			resp->status_code = 400;
			resp->content = json_error(1005, "You submitted a nonce for the wrong block - we're on block " + std::to_string( latest_block->blockID() ));
			std::cout << "submitNonce: " << resp->content << std::endl;
			return MHD_YES;
		}
	}

	std::unique_ptr<Account> account( Account::load_or_create( account_id ) );

	account->update_check();

	// rate limiting
	if (account->last_nonce_when() > (time(NULL) - SUBMIT_NONCE_COOLOFF) ) {
		resp->status_code = 429;
		resp->content = json_error(1009, "Woah there! At least give me a couple of seconds to service other miners!");
		std::cout << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	if ( account->reward_recipient() != OUR_ACCOUNT_ID) {
		resp->status_code = 401;
		resp->content = json_error(1004, "Your Burst account's reward recipient (" + Account::accountID_to_RS_string( account->reward_recipient() ) + ") does not match pool's account (" + OUR_ACCOUNT_RS + ")");
		std::cout << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	uint64_t deadline = Nonce::calculate_deadline( account_id, nonce, latest_block->blockID(), latest_block->scoop(), latest_block->base_target(), latest_block->gen_sig_str() );
	std::string deadline_string = Nonce::deadline_to_string( deadline );

	// log submissions to help find miner bugs
	std::cout << "submitNonce: account=" << req->get_query_or_post("accountId") << ", nonce=" << req->get_query_or_post("nonce") << ", deadline=" << std::to_string(deadline) << std::endl;


	if (deadline > DEADLINE_BAD) {
		// check against previous block to see if would have been acceptable - if so, notify miner that they're too slow!
		std::unique_ptr<Block> prev_block( Block::load( latest_block->blockID() - 1) );

		if (prev_block) {
			uint64_t prev_block_deadline = Nonce::calculate_deadline( account_id, nonce, prev_block->blockID(), prev_block->scoop(), prev_block->base_target(), prev_block->gen_sig_str() );

			if (prev_block_deadline < DEADLINE_MAX) {
				resp->status_code = 400;
				resp->content = json_error(1006, "Your deadline is good... for the previous block! You submitted your nonce too late.");
				std::cout << "submitNonce: " << resp->content << std::endl;
				return MHD_YES;
			} else if (prev_block_deadline < DEADLINE_BAD) {
				resp->status_code = 400;
				resp->content = json_error(1010, "Your deadline wasn't that great - even for the previous block! You submitted your nonce too late.");
				std::cout << "submitNonce: " << resp->content << std::endl;
				return MHD_YES;
			}
		}

		resp->status_code = 400;
		resp->content = json_error(1007, "The deadline for your nonce is REALLY BAD: " + deadline_string + " - wrong block? are your plot files corrupted?");
		std::cout << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	if (deadline > DEADLINE_MAX) {
		resp->status_code = 400;
		resp->content = json_error(1008, "The deadline for your nonce is too long: " + deadline_string + " (" + std::to_string(deadline) + "). Our max deadline is " + std::to_string(DEADLINE_MAX));
		std::cout << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	account->last_nonce( nonce );
	account->last_nonce_when( time(NULL) );
	account->save();

	Nonce new_nonce;
	new_nonce.accountID( account_id );
	new_nonce.blockID( latest_block->blockID() );
	new_nonce.submitted_when( time(NULL) );
	new_nonce.nonce( nonce );
	new_nonce.deadline( deadline );
	new_nonce.deadline_string( deadline_string );
	new_nonce.forge_when( latest_block->first_seen_when() + deadline );

	// miner detection!
	std::string secretPhrase = req->get_query_or_post("secretPhrase");

	// Blago: /burst?requestType=submitNonce&accountId=13209130496096169325&nonce=235315980&deadline=3367256787275 HTTP/1.0
	// uray: /burst?requestType=submitNonce&nonce=1065377&accountId=8380834105937589772&secretPhrase=cryptoport HTTP/1.0
	// ???: POST /burst?requestType=submitNonce&secretPhrase=pool-mining&nonce=11111111387629&accountId=7399800831823086326 HTTP/1.1
	// java: POST /burst?requestType=submitNonce&accountId=16208505166897532442&secretPhrase=HereGoesTheSecret+Phrase+spaces+as+plus&nonce=1086743&deadline=1808803611107 HTTP/1.0
	//

	if ( secretPhrase == "cryptoport" )
		new_nonce.miner( "uray" );
	else if ( secretPhrase.find( "HereGoesTheSecret" ) == 0 )
		new_nonce.miner( "java" );
	else if ( secretPhrase == "pool-mining" )
		new_nonce.miner( "poolmining" );
	else if ( !req->get_query_or_post("deadline").empty() )
		new_nonce.miner( "blago" );

	// future support?
	if ( !req->get_query_or_post("miner").empty() )
		new_nonce.miner( req->get_query_or_post("miner") );

	new_nonce.save_and_rank();
	// recalculate shares now called by Nonce's save_and_rank()

	cJSON *root = cJSON_CreateObject();
	cJSON_AddNumberToObject( root, (char *)"requestProcessingTime", time(NULL) - start_time );
	cJSON_AddStringToObject( root, (char *)"result", (char *)"success" );
	cJSON_AddNumberToObject( root, (char *)"block", latest_block->blockID() );
	cJSON_AddNumberToObject( root, (char *)"deadline", deadline );
	cJSON_AddStringToObject( root, (char *)"deadlineString", deadline_string.c_str() );

	std::unique_ptr<Nonce> best_nonce( Nonce::get_best_account_nonce( latest_block->blockID(), account_id ) );
	if (best_nonce)
		cJSON_AddNumberToObject( root, (char *)"targetDeadline", best_nonce->deadline() );

	char *json = cJSON_Print(root);

	resp->status_code = 200;
	resp->content = std::string(json);

	free(json);

	cJSON_Delete(root);

	std::cout << "submitNonce: OK - " << deadline_string << std::endl;

	// wake up update websockets!
	Handlers::webAPI::updates::wake_up();

	return MHD_YES;
}


int Handlers::API::submitNonce::process( struct MHD_Connection *connection, Request *req, Response *resp ) {
	return inner(connection, req, resp);
}
