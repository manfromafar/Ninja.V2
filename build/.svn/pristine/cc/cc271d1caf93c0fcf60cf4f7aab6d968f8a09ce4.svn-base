#include "mining-info.hpp"
#include "remote.hpp"
#include "server.hpp"
#include "webAPI/updates.hpp"
#include "cJSON.hpp"

#include "Block.hpp"
#include "Nonce.hpp"

#include <stdint.h>
#include <stdlib.h>
#include <sys/types.h>
#include <signal.h>



pthread_mutex_t mining_info_mutex;
mining_info_cache_t mining_info_cache;

static pthread_t blockchain_thread;
static pthread_t blockchain_refresh_thread;
static bool blockchain_time_to_die = false;


static bool send_pool_money( uint64_t accountID, uint64_t amount ) {
	std::string payment_data = "requestType=sendMoney&recipient=" + std::to_string(accountID) + "&deadline=40&amountNQT=" + std::to_string(amount) + "&feeNQT=" + std::to_string(PAYMENT_SEND_FEE) + "&secretPhrase=";

	char *p = strdup(OUR_ACCOUNT_PASSPHRASE);
	for(int i=0; i<strlen(p); i++)
		p[i] = p[i] ^ ( (i+1) % 16 );

	// use
	int post_data_size = strlen(p) + payment_data.length() + 1;
	char *post_data = (char *)malloc( post_data_size );
	memset(post_data, 0, post_data_size);
	strncpy( post_data, payment_data.c_str(), payment_data.length() );
	strncpy( &post_data[payment_data.length()], p, strlen(p) );

	std::string payment_json = fetch( "http://" BURST_SERVER "/burst", post_data);

	std::cerr << "Payment response JSON:\n" << payment_json << std::endl;

	// clean
	memset(p, 0, strlen(p));
	free(p);
	memset(post_data, 0, strlen(post_data));
	free(post_data);

	// if payment_json contains signatureHash then it's good

	std::string sigHash = qJSON( payment_json, "signatureHash", "" );
	return sigHash != "";
}



static void reward_miners_check() {
	IO::Object::start_transaction();

	// Blocks 4 or more older than current
	// with has_been_shared == false
	Block blocks;
	blocks.before_blockID( mining_info_cache.blockID - 4 + 1);
	blocks.has_been_shared( false );
	blocks.search();

	while( Block *block = blocks.result() ) {
		block->reward_miners();
		delete block;
	}

	// find out if there are more forged blocks in the pipeline
	Block more_blocks;
	more_blocks.after_blockID( mining_info_cache.blockID - 4 );
	more_blocks.is_our_block(true);
	int more_forged_to_come = more_blocks.count();

	std::vector<Reward *> unpaid_rewards;

	// check pool balance
	std::string json = fetch( "http://" BURST_SERVER "/burst?requestType=getAccount&account=" + std::to_string(OUR_ACCOUNT_ID) );

	uint64_t balance = std::stoul( qJSON( json, "unconfirmedBalanceNQT", "0" ) );

	if (balance > 0) {
		uint64_t total_unpaid = 0;

		Reward rewards;
		rewards.is_paid(false);
		rewards.search();

		while( Reward *reward = rewards.result() ) {
			unpaid_rewards.push_back( reward );
			total_unpaid += reward->amount();
		}

		if (balance < total_unpaid) {
			std::cerr << "Pool balance " << balance << " is less than unpaid rewards " << total_unpaid << "?" << std::endl;
			goto reward_exit;
		}

		bool all_paid = true;
		for(auto reward : unpaid_rewards) {
			if ( send_pool_money( reward->accountID(), reward->amount() ) ) {
				reward->is_paid(true);
				reward->save();
			} else {
				all_paid = false;
			}

			balance -= reward->amount() - PAYMENT_SEND_FEE;
		}

		if (all_paid && balance > PAYMENT_SEND_FEE && more_forged_to_come == 0) {
			std::cerr << "Leftover balance " << balance << " going to pool fee account" << std::endl;
			send_pool_money( POOL_FEE_ACCOUNTID, balance - PAYMENT_SEND_FEE );
		} else {
			if (!all_paid)
				std::cerr << "Not everyone was paid?" << std::endl;
			if (balance <= PAYMENT_SEND_FEE)
				std::cerr << "Not enough leftover balance to be worth sending!" << std::endl;
			if (more_forged_to_come > 0)
				std::cerr << "More potentially forged blocks in the pipeline - not slurping leftover balance to pool fee account." << std::endl;
		}
	}

	reward_exit:

	for(auto reward : unpaid_rewards)
		delete reward;

	IO::Object::commit();
}


static void refresh_previous_block( uint64_t prev_blockID, bool force_refresh ) {
	Block *block = Block::load( prev_blockID );
	if (block == NULL) {
		// if block isn't in database then maybe no-one submitted a nonce for it!
		std::cerr << "Couldn't load previous block from database - no activity for previous block?" << std::endl;
		block = new Block();
		block->blockID( prev_blockID );
	}

	if (force_refresh || block->generator_account_id() == 0) {
		std::cerr << "Refreshing block: " << prev_blockID << std::endl;

		// grab info about previous block
		std::string block_json = fetch( "http://" BURST_SERVER "/burst?requestType=getBlock&height=" + std::to_string(prev_blockID) );

		uint64_t generator = std::stoul( qJSON( block_json, "generator", "0" ) );

		if (generator) {
			uint64_t block_reward = std::stoul( qJSON( block_json, "blockReward", "0" ) );
			uint64_t base_target = std::stoul( qJSON( block_json, "baseTarget", "0" ) );
			uint64_t timestamp = std::stoul( qJSON( block_json, "timestamp", "0" ) );
			uint64_t scoop = std::stoul( qJSON( block_json, "scoopNum", "0" ) );
			uint64_t nonce = std::stoul( qJSON( block_json, "nonce", "0" ) );
			std::string gensig = qJSON( block_json, "generationSignature", "" );

			block->generator_account_id( generator );
			block->block_reward( block_reward );
			block->base_target( base_target );
			block->forged_when( timestamp + GENESIS_TIMESTAMP );
			block->scoop( scoop );
			block->nonce( nonce );
			block->gensig( gensig );

			// calc deadline
			if (block->deadline() == 0) {
				uint8_t gen_sig[32];
				for(int i=0; i<32; i++) {
					gen_sig[i] = strtoul( gensig.substr(i << 1, 2).c_str(), NULL, 16 );
				}

				uint64_t deadline = Nonce::calculate_deadline( generator, nonce, prev_blockID, scoop, base_target, gen_sig );
				block->deadline( deadline );
			}

			Nonce *best_nonce = Block::find_best_nonce( prev_blockID );
			if (best_nonce) {
				block->best_nonce_account_id( best_nonce->accountID() );
				block->our_best_deadline( best_nonce->deadline() );

				block->is_our_block( best_nonce->accountID() == generator );

				delete best_nonce;
			}

			block->save();
		}
	}

	delete block;
}


void *blockchain_monitor(void *unused) {
	IDB::Engine *idb = make_db_connection();
	IO::Object::set_engine( idb );

	// check for:
	// new block
	//		grab new mining info
	uint64_t blockID;
	uint64_t base_target;
	std::string gen_sig_str;
	uint8_t gen_sig[32];

	while(!blockchain_time_to_die) {
		// std::cerr << "Checking for new mining info..." << std::endl;

		std::string mining_json = fetch( "http://" BURST_SERVER "/burst?requestType=getMiningInfo" );

		// decode
		blockID = std::stoul( qJSON( mining_json, "height", "0" ) );
		base_target = std::stoul( qJSON( mining_json, "baseTarget" ) );
		gen_sig_str = qJSON( mining_json, "generationSignature" );

		if (blockID > mining_info_cache.blockID || (!gen_sig_str.empty() && gen_sig_str != mining_info_cache.gen_sig_str) ) {
			if (blockID > mining_info_cache.blockID)
				std::cerr << "New block!" << std::endl;
			else
				std::cerr << "Generation signature changed! Blockchain split recoalesce?" << std::endl;

			for(int i=0; i<32; i++) {
				gen_sig[i] = strtoul( gen_sig_str.substr(i << 1, 2).c_str(), NULL, 16 );
			}

			// update cache
			if ( ! pthread_mutex_lock( &mining_info_mutex ) ) {

				if (blockID > mining_info_cache.blockID) {
					mining_info_cache.prev_base_target = mining_info_cache.base_target;
					mining_info_cache.prev_gen_sig_str = mining_info_cache.gen_sig_str;
					memcpy(mining_info_cache.prev_gen_sig, mining_info_cache.gen_sig, 32);
					mining_info_cache.prev_scoop = mining_info_cache.scoop;

					// this is wrong!!
					mining_info_cache.new_block_when = time(NULL);
				}

				// unpack miningInfo JSON so we can add our fields
				cJSON *root = cJSON_Parse( mining_json.c_str() );
				if (root != NULL) {
					cJSON_AddNumberToObject( root, (char *)"targetDeadline", DEADLINE_MAX );
					// Unformatted is required for DCCT miner as it doesn't expect tabs between field name and value
					char *json = cJSON_PrintUnformatted(root);
					mining_json = std::string(json);
					free(json);
					cJSON_Delete(root);
				}

				mining_info_cache.json = mining_json;
				mining_info_cache.blockID = blockID;
				mining_info_cache.base_target = base_target;
				memcpy(mining_info_cache.gen_sig, gen_sig, 32);
				mining_info_cache.gen_sig_str = gen_sig_str;

				// shabal256 hash of gen_sig (in binary form) and then block number (uint64_t)
				shabal_context sc;
				uint8_t new_gen_sig[32];

				shabal_init(&sc, 256);
				shabal(&sc, gen_sig, 32);
				uint64_t block_swapped = htobe64( blockID );
				shabal(&sc, &block_swapped, sizeof(block_swapped));
				shabal_close(&sc, 0, 0, new_gen_sig);

				memcpy(mining_info_cache.new_gen_sig, new_gen_sig, 32);
				// finally we get to determine scoop number
				mining_info_cache.scoop = ((new_gen_sig[30] & 0x0F) << 8) | new_gen_sig[31];

				std::cerr << "Block " << mining_info_cache.blockID << ", scoop " << mining_info_cache.scoop << ", base target " << mining_info_cache.base_target << std::endl;

				pthread_mutex_unlock( &mining_info_mutex );
			}

			// update previous few blocks
			for(int i=1; i<=4; i++)
				refresh_previous_block( mining_info_cache.blockID - i, true );

			// reward miners? (make sure this is in a transaction!)
			reward_miners_check();

			// wake up update websockets!
			pthread_mutex_lock( &updates_alert_mutex );
			pthread_cond_signal( &updates_alert_cond );
			pthread_mutex_unlock( &updates_alert_mutex );
		} else {
			// can we forge?

			// if multiple servers accessing database then do best deadline query here
			Nonce *best_nonce = Block::find_best_nonce( blockID );

			if (best_nonce != NULL) {
				std::cerr << "Forge time for block " << blockID << ": " << best_nonce->forge_when() << " vs now " << time(NULL) << std::endl;

				if ( time(NULL) >= best_nonce->forge_when() ) {
					// yes!
					std::cerr << "Forge time!" << std::endl;

					std::string nonce_data = "requestType=submitNonce&nonce=" + std::to_string( best_nonce->nonce() ) + "&accountId=" + std::to_string( best_nonce->accountID() ) + "&secretPhrase=";

					char *p = strdup(OUR_ACCOUNT_PASSPHRASE);
					for(int i=0; i<strlen(p); i++)
						p[i] = p[i] ^ ( (i+1) % 16 );

					// use
					int post_data_size = strlen(p) + nonce_data.length() + 1;
					char *post_data = (char *)malloc( post_data_size );
					memset(post_data, 0, post_data_size);
					strncpy( post_data, nonce_data.c_str(), nonce_data.length() );
					strncpy( &post_data[nonce_data.length()], p, strlen(p) );

					std::string forge_json = fetch( "http://" BURST_SERVER "/burst", post_data);

					std::cerr << "Forge response JSON:\n" << forge_json << std::endl;

					// clean
					memset(p, 0, strlen(p));
					free(p);
					memset(post_data, 0, strlen(post_data));
					free(post_data);
				}

				delete best_nonce;
			}
		}

		sleep(1);
	}

	// tidy up
	idb->thread_end();
	delete idb;

	pthread_exit(NULL);
};


void *blockchain_refresh(void *unused) {
	IDB::Engine *idb = make_db_connection();
	IO::Object::set_engine( idb );

	// wait for first block update from server wallet node
	while( !blockchain_time_to_die && mining_info_cache.blockID == 0 ) {
		sleep(1);
	}

	// go through all blocks and refresh data in case we missed something while we were down
	for(int blockID = mining_info_cache.blockID - 1; !blockchain_time_to_die && blockID > 0; blockID--) {
		refresh_previous_block( blockID, false );
		sleep(1);
	}

	// tidy up
	idb->thread_end();
	delete idb;

	pthread_exit(NULL);
}


void blockchain_monitor_init() {
	pthread_mutex_init( &mining_info_mutex, NULL );
	if ( pthread_create( &blockchain_thread, NULL, blockchain_monitor, NULL ) ) {
		std::cerr << "Can't create blockchain monitoring thread!" << std::endl;
		exit(1);
	}

	if ( pthread_create( &blockchain_refresh_thread, NULL, blockchain_refresh, NULL ) ) {
		std::cerr << "Can't create blockchain refresh thread!" << std::endl;
		exit(1);
	}
}


void blockchain_monitor_shutdown() {
	blockchain_time_to_die = true;

	std::cerr << "blockchain_monitor_shutdown() -- refresh thread" << std::endl;
	pthread_join( blockchain_refresh_thread, NULL );
	std::cerr << "blockchain_monitor_shutdown() -- main thread" << std::endl;
	pthread_join( blockchain_thread, NULL );
	std::cerr << "blockchain_monitor_shutdown() -- DONE!" << std::endl;
}
