#include "mining-info.hpp"
#include "remote.hpp"
#include "server.hpp"

#include "Block.hpp"
#include "Nonce.hpp"

#include <stdint.h>
#include <stdlib.h>
#include <sys/types.h>


pthread_mutex_t mining_info_mutex;
mining_info_cache_t mining_info_cache;


void diagnose_previous_block() {
	uint64_t prev_blockID = mining_info_cache.blockID - 1;

	// grab info about previous block to find out if we received a reward
	std::string block_json = fetch( "http://" BURST_SERVER "/burst?requestType=getBlock&height=" + std::to_string(prev_blockID) );

	uint64_t generator = std::stoul( qJSON( block_json, "generator" ) );
	uint64_t block_reward = std::stoul( qJSON( block_json, "blockReward" ) );

	Block *block = Block::load( prev_blockID );
	if (block == NULL) {
		// huh? we should have this block in our database for sure!
		std::cerr << "Couldn't load previous block from database???" << std::endl;
		block = new Block();
		block->blockID( prev_blockID );
	}

	block->generator_account_id( generator );
	block->block_reward( block_reward );

	Account *account = Account::load( generator );
	if (account == NULL) {
		account = new Account();
		account->accountID( generator );
	}

	// time to check reward recipient again
	account->update_reward_recipient();

	if (account->reward_recipient() == OUR_ACCOUNT_ID) {
		// our block!
		block->is_our_block(true);
	}

	block->save();

	delete account;

	// reward miners? (make sure this is in a transaction!)
	block->reward_miners();

	delete block;
}


void *blockchain_monitor(void *unused) {
	IDB::Engine *idb = make_db_connection();
	IO::Object::set_engine( idb );

	// check for:
	// new block
	//		grab new mining info
	uint64_t blockID;
	uint64_t base_target;
	std::string gen_sigs;
	uint8_t gen_sig[32];

	mining_info_cache.blockID = 0;
	mining_info_cache.prev_base_target = 0;

	while(!time_to_die) {
		std::cerr << "Checking for new mining info..." << std::endl;

		std::string mining_json = fetch( "http://" BURST_SERVER "/burst?requestType=getMiningInfo" );

		// decode
		blockID = std::stoul( qJSON( mining_json, "height" ) );

		if (blockID > mining_info_cache.blockID) {
			std::cerr << "New block!" << std::endl;

			base_target = std::stoul( qJSON( mining_json, "baseTarget" ) );
			gen_sigs = qJSON( mining_json, "generationSignature" );

			for(int i=0; i<32; i++) {
				gen_sig[i] = strtoul( gen_sigs.substr(i << 1, 2).c_str(), NULL, 16 );
			}

			// update cache
			if ( ! pthread_mutex_lock( &mining_info_mutex ) ) {
				mining_info_cache.prev_base_target = mining_info_cache.base_target;
				memcpy(mining_info_cache.prev_gen_sig, mining_info_cache.gen_sig, 32);
				mining_info_cache.prev_scoop = mining_info_cache.scoop;

				mining_info_cache.json = mining_json;
				mining_info_cache.blockID = blockID;
				mining_info_cache.base_target = base_target;
				memcpy(mining_info_cache.gen_sig, gen_sig, 32);
				mining_info_cache.new_block_when = time(NULL);

				// shabal256 hash of gen_sig (in binary form) and then block number (uint64_t)
				shabal_context sc;
				uint8_t new_gen_sig[32];

				shabal_init(&sc, 256);
				shabal(&sc, gen_sig, 32);
				uint64_t block_swapped = htobe64( blockID );
				shabal(&sc, &block_swapped, sizeof(block_swapped));
				shabal_close(&sc, 0, 0, new_gen_sig);

				memcpy(mining_info_cache.new_gen_sig, new_gen_sig, 32);
				// finally we get to determine scoop number
				mining_info_cache.scoop = ((new_gen_sig[30] & 0x0F) << 8) | new_gen_sig[31];

				std::cerr << "Block " << mining_info_cache.blockID << ", scoop " << mining_info_cache.scoop << ", base target " << mining_info_cache.base_target << std::endl;

				pthread_mutex_unlock( &mining_info_mutex );
			}

			// do stuff with the old block
			diagnose_previous_block();
		} else {
			// can we forge?

			// if multiple servers accessing database then do best deadline query here
			Nonce *best_nonce = Block::find_best_nonce( blockID );

			if (best_nonce != NULL) {
				std::cerr << "Forge time for block " << blockID << ": " << best_nonce->forge_when() << " vs now " << time(NULL) << std::endl;

				if ( time(NULL) == best_nonce->forge_when() ) {
					// yes!
					std::cerr << "Forge time!" << std::endl;


				}
				delete best_nonce;
			}
		}

		sleep(1);
	}

	pthread_exit(NULL);
};
