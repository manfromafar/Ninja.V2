/*
		Create table Accounts (
			accountID					bigint unsigned not null unique,
			first_seen_when				timestamp not null default current_timestamp,
			reward_recipient			bigint unsigned not null,
			access_checked_when			timestamp null default null,
			last_nonce					bigint unsigned,
			last_nonce_when				timestamp null default null,
			primary key					(accountID)
		);
*/

#include "Share.hpp"

#include "Account.cxx"

#include "remote.hpp"


#define ESTIMATED_CAPACITY_DEADLINES 20


STATIC uint64_t Account::estimated_capacity( uint64_t accountID, uint64_t from_blockID, uint64_t base_target ) {
	Share shares = new Share();
	shares.accountID( accountID );
	shares.after_blockID( from_blockID );
	shares.order_by( Share::COL_deadline, Share::ORDER_BY_ASC );
	shares.limit(ESTIMATED_CAPACITY_DEADLINES);
	shares.search();

	uint64_t total_deadlines = 0;

	while( Share *share = shares.result() ) {
		total_deadlines += share->deadline();
		delete share;
	}

	uint64_t avg_deadline = total_deadlines / ESTIMATED_CAPACITY_DEADLINES;

	// capacity is latest baseTarget/avg_deadline in TB;
	// e.g. 1580368/5624/10 = 28TB
	return (base_target / avg_deadline) / 10;
}


void Account::update_reward_recipient() {
	std::string reward_json = fetch( "http://" BURST_SERVER "/burst?requestType=getRewardRecipient&account=" + std::to_string( accountID() ) );

	uint64_t recipient = STRTOUL( qJSON( reward_json, "rewardRecipient" ) );

	if ( recipient != 0 ) {
		reward_recipient( recipient );
		access_checked_when( time(NULL ) );
		save();
	}

	std::cerr << "Reward recipient for " << std::to_string(accountID()) << ": " << recipient << std::endl;
}


static const char initial_codeword[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
static const char gexp[] = {1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1};
static const char glog[] = {0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15};
static const char codeword_map[] = {3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11};
static const char alphabet[] = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ";

#define BASE_32_LENGTH 13
#define BASE_10_LENGTH 20


static char gmult(char a, char b) {
    if (a == 0 || b == 0)
        return 0;

    char idx = (glog[a] + glog[b]) % 31;

    return gexp[idx];
}


STATIC std::string Account::accountID_to_RS_string( uint64_t accountID ) {
	if (accountID == 0)
		return "";

	// convert accountID into array of digits
	std::string plain_string = std::to_string( accountID );
	int length = plain_string.length();

	char plain_string_10[BASE_10_LENGTH];
	memset(plain_string_10, 0, BASE_10_LENGTH);

    for(int i = 0; i < length; i++)
        plain_string_10[i] = (char)plain_string[i] - (char)'0';

    int codeword_length = 0;
    char codeword[ sizeof(initial_codeword) ];
    memcpy(codeword, initial_codeword, sizeof(initial_codeword));

    do {  // base 10 to base 32 conversion
        int new_length = 0;
        int digit_32 = 0;

        for (int i = 0; i < length; i++) {
            digit_32 = digit_32 * 10 + plain_string_10[i];

            if (digit_32 >= 32) {
                plain_string_10[new_length] = digit_32 >> 5;
                digit_32 &= 31;
                new_length++;
            } else if (new_length > 0) {
                plain_string_10[new_length] = 0;
                new_length++;
            }
        }

        length = new_length;
        codeword[codeword_length] = digit_32;
        codeword_length++;
    } while(length > 0);

    char p[] = {0, 0, 0, 0};
    for (int i = BASE_32_LENGTH - 1; i >= 0; i--) {
        char fb = codeword[i] ^ p[3];
        p[3] = p[2] ^ gmult(30, fb);
        p[2] = p[1] ^ gmult(6, fb);
        p[1] = p[0] ^ gmult(9, fb);
        p[0] =        gmult(17, fb);
    }

    for(int i = 0; i<sizeof(p); i++)
    	codeword[BASE_32_LENGTH + i] = p[i];

    std::string account_RS_string;

    for (int i = 0; i < sizeof(initial_codeword); i++) {
        char codeword_index = codeword_map[i];
        char alphabet_index = codeword[codeword_index];

        account_RS_string += alphabet[alphabet_index];

        if ((i & 3) == 3 && i < 13)
            account_RS_string += "-";
    }

    return account_RS_string;
}
