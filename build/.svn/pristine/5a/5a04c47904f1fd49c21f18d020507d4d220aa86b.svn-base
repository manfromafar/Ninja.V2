#include "Account.hpp"
#include "Block.hpp"

#include "API/submitNonce.hpp"
#include "webAPI/updates.hpp"
#include <pthread.h>
#include <signal.h>

#include "cJSON.hpp"

#include "mining-info.hpp"


STATIC int Handlers::API::submitNonce::inner( struct MHD_Connection *connection, Request *req, Response *resp ) {
	time_t start_time = time(NULL);

	/*
	 * XXX I don't think we even need to enforce POST
		if (req->method != POST) {
			resp->status_code = 403;
			resp->content = JSON_ERROR(1001, "submitNonce request type only available via POST.");
			return MHD_YES;
		}
	*
	*/

	std::string nonce_s = req->get_query_or_post("nonce");

	if ( nonce_s.empty() ) {
		resp->status_code = 400;
		resp->content = JSON_ERROR(1002, "submitNonce request missing 'nonce' parameter");
		std::cerr << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}
	uint64_t nonce = STRTOUL( nonce_s );

	uint64_t account_id = STRTOUL( req->get_query_or_post("accountId") );

	if ( account_id == 0 ) {
		resp->status_code = 400;
		resp->content = JSON_ERROR(1003, "submitNonce request missing 'accountId' parameter - or were you trying to solo mine?");
		std::cerr << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	Account *account = Account::load( account_id );
	if (account == NULL) {
		account = new Account();
		account->accountID( account_id );
		account->last_nonce_when( 0 );
	}

	// rate limiting
	if (account->last_nonce_when() > (time(NULL) - SUBMIT_NONCE_COOLOFF) ) {
		delete account;

		resp->status_code = 429;
		resp->content = JSON_ERROR(1009, "Woah there! At least give me a couple of seconds to service other miners!");
		std::cerr << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}


	// does account have us as reward recipient?
	if (account->access_checked_when() < time(NULL) - REWARD_ACCESS_TIMEOUT) {
		// time to check reward recipient again
		account->update_reward_recipient();
	}

	if ( account->reward_recipient() != OUR_ACCOUNT_ID) {
		delete account;

		resp->status_code = 401;
		resp->content = JSON_ERROR(1004, "Your Burst account does not have pool's account as reward recipient.");
		std::cerr << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	uint64_t blockID = STRTOUL( req->get_query_or_post("block") );
	if (blockID) {
		if (blockID != mining_info_cache.blockID) {
			delete account;

			resp->status_code = 400;
			resp->content = JSON_ERROR(1005, "You submitted a nonce for the wrong block - we're on block " + std::to_string(mining_info_cache.blockID));
			std::cerr << "submitNonce: " << resp->content << std::endl;
			return MHD_YES;
		}
	}

	uint64_t deadline = Nonce::calculate_deadline( account_id, nonce, mining_info_cache.blockID, mining_info_cache.scoop, mining_info_cache.base_target, mining_info_cache.gen_sig );
	std::string deadline_string = Nonce::deadline_to_string( deadline );

	if (deadline > DEADLINE_BAD) {
		delete account;

		// check against previous block to see if would have been acceptable - if so, notify miner that they're too slow!
		if (mining_info_cache.prev_base_target > 0) {
			uint64_t prev_block_deadline = Nonce::calculate_deadline( account_id, nonce, mining_info_cache.blockID - 1, mining_info_cache.prev_scoop, mining_info_cache.prev_base_target, mining_info_cache.prev_gen_sig );

			if (prev_block_deadline < DEADLINE_MAX) {
				resp->status_code = 400;
				resp->content = JSON_ERROR(1006, "Your deadline is good... for the previous block! You submitted your nonce too late.");
				std::cerr << "submitNonce: " << resp->content << std::endl;
				return MHD_YES;
			}
		}

		resp->status_code = 400;
		resp->content = JSON_ERROR(1007, "The deadline for your nonce is REALLY BAD: " + deadline_string + " - wrong block? are your plot files corrupted?");
		std::cerr << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	if (deadline > DEADLINE_MAX) {
		delete account;

		resp->status_code = 400;
		resp->content = JSON_ERROR(1008, "The deadline for your nonce is too long: " + deadline_string + " - you need more plot files.");
		std::cerr << "submitNonce: " << resp->content << std::endl;
		return MHD_YES;
	}

	account->last_nonce( nonce );
	account->last_nonce_when( time(NULL) );
	account->save();
	delete account;

	Nonce new_nonce;
	new_nonce.accountID( account_id );
	new_nonce.blockID( mining_info_cache.blockID );
	new_nonce.submitted_when( time(NULL) );
	new_nonce.nonce( nonce );
	new_nonce.deadline( deadline );
	new_nonce.deadline_string( deadline_string );
	new_nonce.forge_when( mining_info_cache.new_block_when + deadline );
	new_nonce.save_and_rank();
	// recalculate shares now called by Nonce's save_and_rank()

	cJSON *root = cJSON_CreateObject();
	cJSON_AddNumberToObject( root, (char *)"requestProcessingTime", time(NULL) - start_time );
	cJSON_AddStringToObject( root, (char *)"result", (char *)"success" );
	cJSON_AddNumberToObject( root, (char *)"block", mining_info_cache.blockID );
	cJSON_AddNumberToObject( root, (char *)"deadline", deadline );
	cJSON_AddStringToObject( root, (char *)"deadlineString", deadline_string.c_str() );

	Nonce *best_nonce = Block::find_best_nonce( mining_info_cache.blockID );
	if (best_nonce) {
		cJSON_AddNumberToObject( root, (char *)"targetDeadline", best_nonce->deadline() );
		delete best_nonce;
	}

	char *json = cJSON_Print(root);

	resp->status_code = 200;
	resp->content = std::string(json);

	free(json);

	cJSON_Delete(root);

	std::cerr << "submitNonce: " << resp->content << std::endl;

	// wake up update websockets!
	pthread_cond_signal( &updates_alert_cond );

	return MHD_YES;
}


int Handlers::API::submitNonce::process( struct MHD_Connection *connection, Request *req, Response *resp ) {
	return inner(connection, req, resp);
}
