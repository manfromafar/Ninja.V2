/*
		Create table Shares (
			blockID						bigint unsigned not null,
			accountID					bigint unsigned not null,
			share_fraction				double not null,
			deadline					bigint unsigned not null,
			deadline_string				varchar(255) not null,
			primary key					(blockID, accountID),
			index						(blockID, share_fraction)
		);
*/

#include "Share.cxx"

SEARCHMOD( before_blockID, uint64_t );
SEARCHMOD( after_blockID, uint64_t );
SEARCHMOD( historic_average, bool );
SEARCHMOD( mean_weighted_deadline, bool );


SEARCHPREP {
	Block *blocks = NULL;
	bool delete_additional_on_exit = false;

	if ( SEARCHMOD_IS_SET(mean_weighted_deadline) ) {
		blocks = new Block;

		if ( SEARCHMOD_IS_SET(after_blockID) )
			blocks->after_blockID( SEARCHMOD_VALUE(after_blockID) );

		if (!additional) {
			additional = new std::vector<IO::Object *>;
			delete_additional_on_exit = true;
		}

		additional->push_back( blocks );
	}

	SEARCHPREP_SUPER;

	if ( SEARCHMOD_IS_SET(before_blockID) ) {
		IDB::Where *new_clause = new IDB::sqlLtUInt64( "blockID", SEARCHMOD_VALUE(before_blockID) );
		SEARCHPREP_ADD( new_clause );
	}

	if ( SEARCHMOD_IS_SET(after_blockID) ) {
		IDB::Where *new_clause = new IDB::sqlGtUInt64( "Shares.blockID", SEARCHMOD_VALUE(after_blockID) );
		SEARCHPREP_ADD( new_clause );
	}

	if ( SEARCHMOD_IS_SET(historic_average) ) {
		ps->options->order_by = "share_fraction DESC";
		ps->options->group_by = "accountID";

		ps->cols->clear();
		ps->cols->push_back("blockID");
		ps->cols->push_back("accountID");

		// this is gross:
		std::string sub_select = "select count(distinct blockID) from Shares where blockID > " + std::to_string( SEARCHMOD_VALUE(after_blockID) ) + " and blockID < " + std::to_string( SEARCHMOD_VALUE(before_blockID) );
		ps->cols->push_back( "sum(share_fraction)/(" + sub_select + ") as share_fraction" );

		ps->cols->push_back("null");
		ps->cols->push_back("null");
}

	if ( SEARCHMOD_IS_SET(mean_weighted_deadline) ) {
		ps->options->order_by = "weighted_deadline ASC";

		ps->cols->clear();
		ps->cols->push_back("Shares.blockID");
		ps->cols->push_back("Shares.accountID");
		ps->cols->push_back("null");
		// change deadline col
		ps->cols->push_back( "sum(Shares.deadline*Blocks.base_target) as weighted_deadline" );
		ps->cols->push_back("null");
	}

	if (blocks)
		delete blocks;

	if (additional && delete_additional_on_exit)
		delete additional;

	SEARCHPREP_END;
}


STATIC Share *Share::historic_shares( uint64_t to_blockID, uint64_t block_count ) {
	Share *shares = new Share();
	shares->after_blockID( to_blockID - block_count );
	// include this block
	shares->before_blockID( to_blockID + 1 );
	shares->historic_average(true);
	return shares;
}


STATIC uint64_t Share::get_mean_weighted_deadline( uint64_t for_accountID, uint64_t from_blockID, uint64_t samples_for_mean ) {
	// select avg(lump) as avg_lump from
	//	(select Shares.deadline,base_target,Shares.deadline*base_target as lump from Shares join Blocks using (blockID) where accountID=15188591833767009677 and blockID>65611 order by lump asc limit 5) as arse;

	Share shares;
	shares.accountID( for_accountID );
	shares.after_blockID( from_blockID );
	shares.mean_weighted_deadline( true );
	shares.limit( samples_for_mean );

	std::unique_ptr<Share> share( shares.present() );
	if (share) {
		return share->deadline() / samples_for_mean;
	}

	return 0;
}
