#include "config.hpp"
#include "Request.hpp"
#include "StaticHandler.hpp"
#include "StaticTemplateHandler.hpp"
#include "RegistryHandler.hpp"

#include "handlers.hxx"
#include "templates/static-templates.hxx"

#include "base.hpp"
#include "server.hpp"
#include "blockchain_monitor.hpp"

#include <sys/types.h>
#include <signal.h>
#include <pthread_np.h>


std::map<MHD_Connection *, MHD_UpgradeHandler> websockets;


Handler *Handlers::base::route( struct MHD_Connection *connection, Request *req, Response *resp ) {
	EXTRA_CLASS *extra = (EXTRA_CLASS *) req->extra;

	// if we're being called as the superclass of a handler then there's no more routing to be done
	if ( typeid(*this) != typeid( Handlers::base ) )
		return NULL;

	// everything's ok - carry on
	return new RegistryHandler;
};


int Handlers::base::process_headers( struct MHD_Connection *connection, Request *req, Response *resp ) {
	return Handler::process_headers( connection, req, resp );
};


int Handlers::base::process( struct MHD_Connection *connection, Request *req, Response *resp ) {
	// if we get this far then something isn't right
	return MHD_NO;
};


void sigurg_handler(int sig) {
	// don't need to do anything except implicitly interrupt a select()
	std::cerr << "SIGURG received by thread ID " << pthread_getthreadid_np() << std::endl;
}


void Handlers::base::init() {
	StaticHandler::document_root = DOC_ROOT;

	// URL substrings are checked IN ORDER

	// import generated list of staff handlers...
	using namespace Handlers;

	#include "base-handlers.cxx"
	#include "API-handlers.cxx"
	#include "webAPI-handlers.cxx"

	RegistryHandler::register_handler<StaticHandler>( "/css" );
	RegistryHandler::register_handler<StaticHandler>( "/js" );
	RegistryHandler::register_handler<StaticHandler>( "/images" );
	RegistryHandler::register_handler<StaticHandler>( "/fonts" );
	RegistryHandler::register_handler<StaticHandler>( "/audio" );
	RegistryHandler::register_handler<StaticHandler>( "/favicon.ico" );
	RegistryHandler::register_handler<StaticHandler>( "/google" );
	RegistryHandler::register_handler<StaticHandler>( "/robots.txt" );

	RegistryHandler::register_handler<StaticTemplateHandler>( "/" );
	RegistryHandler::register_handler<StaticTemplateHandler>( "[root]" );

	// URL full-strings are checked IN ORDER
	#include "templates/static-templates.cxx"

	// extension -> mime-type mappings
	StaticHandler::register_mime_type( ".js", "text/javascript" );
	StaticHandler::register_mime_type( ".css", "text/css" );
	StaticHandler::register_mime_type( ".png", "image/png" );

	// init objects too!
	curl_global_init(CURL_GLOBAL_ALL);

	struct sigaction sa;
	sa.sa_handler = sigurg_handler;
	sa.sa_flags = 0;

	if ( sigaction(SIGURG, &sa, NULL) == -1) {
		perror("Can't set up SIGURG handler");
		exit(1);
	}

	pthread_mutex_init( &mining_info_mutex, NULL );

	pthread_t blockchain_thread;
	// start blockchain monitoring thread
	if ( pthread_create( &blockchain_thread, NULL, blockchain_monitor, NULL ) ) {
		std::cerr << "Can't create blockchain monitoring thread!" << std::endl;
		exit(1);
	}
}
