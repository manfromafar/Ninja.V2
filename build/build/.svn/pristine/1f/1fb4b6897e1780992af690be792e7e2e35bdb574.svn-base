#!/usr/bin/perl -w

use strict;

use Cwd qw( realpath );
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../contrib";

use Indigo::Renderer;

use Getopt::Std;

my %opt;
getopts( 'd:', \%opt );

die("usage: $FindBin::Script [-d output-dir] Object.cpp\n") unless @ARGV == 1;

$opt{d} ||= '.';

my ($filename, $dirname, $suffix) = fileparse( $ARGV[0], '.cpp' );
$dirname =~ s|^\./||;

my $prefix = join( '', $dirname, $filename );
my $class = $prefix;
$class =~ s|/||g;
my $define_name = $prefix;
$define_name =~ s|/|__|g;


my %info = (
	columns				=>	[],
	indexes				=>	[],
	search_modifiers	=>	[],
	navigators			=>	[],
	methods				=>	[],
	prefix				=>	$prefix,
	class				=>	$class,
	define_name			=>	$define_name,
	children			=>	[],
	timestamp_t			=>	'String',
	fulltext_fields		=>	[],
	no_navigators		=>	{},
);


my $columns_RE = qr/\( \s* ( [^\)]+? ) \s* \)/x;

$info{conn_type_to_cpp} = {
	Int				=>	'int',
	UInt			=>	'unsigned int',
	UInt64			=>	'unsigned long long int',
	String			=>	'std::string',
	Boolean			=>	'bool',
	Blob			=>	'unsigned char *',
	Double			=>	'double',
	Timestamp		=>	'time_t',
};

$info{cpp_default} = {
	'int'						=>	'(int)0',
	'unsigned int'				=>	'(unsigned int)0',
	'unsigned long long int'	=>	'(unsigned long long int)0',
	'std::string'				=>	'""',
	'bool'						=>	'(bool)false',
	'unsigned char *'			=>	'NULL',
	'double'					=>	'(double)0.0',
	'time_t'					=>	'(time_t)0',
};



print "--- Diagnosis ---\n\n";

my $table_state;
while(<>) {
	chomp;
	next if m/^\s*$/;
	
	if ( !$table_state && m/create table (\S+)/io ) {
		$info{table} = $1;
		$table_state++;
		printf "Table name: %s\n", $info{table};
		
	} elsif ( $table_state && m/primary key\s+$columns_RE/o ) {
		$info{keys} = [ split(/,\s*/, $1) ];
		printf "Primary keys: %s\n", join(', ', @{ $info{keys} });
		
	} elsif ( $table_state && index($_, 'constraint') != -1 ) {
		printf "Constraint ignored\n";
	
	} elsif ( !$table_state && m/^\s*NO_NAVIGATOR$columns_RE/o ) {
		$info{no_navigators}{$1}++;
		printf "NO NAVIGATOR for field: %s\n", $1;
		
	} elsif ( !$table_state && m/^\s*FULLTEXT_FIELD$columns_RE/o ) {
		push( @{ $info{fulltext_fields} }, $1 );
		printf "FULLTEXT searchable field: %s\n", $1;
	
	} elsif ( $table_state && m/index\s+(\S*)\s*$columns_RE/o ) {
		my %index = (
			name	=>	$1 || '',
			columns	=>	[ split(/,\s*/, $2) ],
		);
		push( @{ $info{indexes} }, \%index );
		printf "Index: %s: %s\n", $index{name} || '[anon]', join(', ', @{ $index{columns} });
		
	} elsif ( !$table_state && m/^\s*SEARCHMOD$columns_RE/o ) {
		my ($name, $type) = split(/,\s*/, $1); 
		my %modifier = (
			name	=>	$name,
			type	=>	$type,
		);
		push( @{ $info{search_modifiers} }, \%modifier );
		printf "Search modifier: '%s' takes %s\n", $modifier{name}, $modifier{type};
	} elsif ( !$table_state && index($_, 'SEARCHPREP ') == 0 ) {
		$info{search_prep}++;
		printf "SEARCHPREP method found!\n";
	} elsif ( !$table_state && index($_, 'SEARCHPREP_SUPER') != -1 ) {
		$info{search_prep_super}++;
		printf "SEARCHPREP_SUPER class found!\n";
	} elsif ( !$table_state && index($_, 'SEARCHPREP_END') != -1 ) {
		$info{search_prep_end}++;
		printf "SEARCHPREP_END found!\n";
		
	} elsif ( !$table_state && m/^\s*CHILD_OBJECT(S?)$columns_RE/o ) {
		my $many = $1;
		
		my ($obj, $nav) = split(/,\s*/, $2);
		$nav =~ tr|[ \t]||ds;
		
		my $filename = $obj;
		# insert / before uppercase
		$filename =~ s|([A-Z])|/$1|g;
		# get rid of leading /
		substr($filename, 0, 1) = '';
		
		my %child_object = (
			object		=>	$obj,
			navigator	=>	$nav,
			many		=>	$many,
			filename	=>	$filename,
		);
		push( @{ $info{children} }, \%child_object );
		printf "Child object%s: %s, %s()-based navigation via %s()\n",
			($many ? 's' : ''), $obj, ($many ? 'new' : 'load'), $nav;

	} elsif ( !$table_state && index($_, 'DELETE_CHILDREN') != -1 ) {
		$info{delete_children}++;
		printf "DELETE_CHILDREN found!\n";
			
	} elsif ( !$table_state && m/^(.+?)\b$info{class}::([^\(]+)\((.*)\) {\S*$/o ) {
		my %method = (
			returns	=>	$1,
			name	=>	$2,
			args	=>	$3,
		);
		
		push( @{ $info{methods} }, \%method );
		printf "Method: '%s' takes %s, returns %s\n", $method{name}, ( $method{args} || '[nothing]' ), $method{returns};
		
		if ($method{name} eq 'delete_obj') {
			$info{delete_obj}++;
			printf "Class-special delete_obj() method found!\n";
		}
		
	} elsif ( $table_state && m/^\s*\)/o ) {
		# end of create table
		undef $table_state;
		
	} elsif ($table_state) {
		# assume it's a column
		
		# remove comment if any
		s/ \# .* $ //x;
		
		my ($column, $definition) = split(' ', $_, 2);
		
		next unless $column;
		
		# remove trailing ,
		chop $definition;
		
		my $not_null = ( index($definition, 'not null') != -1 ) ? 1 : 0;

		my $cpp;
		my $conn_type;
		if ( index($definition, 'decimal') != -1 ) {
			$cpp = 'double';
			$conn_type = 'Double';
		} elsif ( index($definition, 'double') != -1 ) {
			$cpp = 'double';
			$conn_type = 'Double';
		} elsif ( index($definition, 'float') != -1 ) {
			$cpp = 'double';
			$conn_type = 'Double';
		} elsif ( index($definition, 'tinyint(1)') != -1 ) {
			$cpp = 'bool';
			$conn_type = 'Boolean';
		} elsif ( index($definition, 'bigint') != -1 ) {
			$cpp = 'unsigned long long int';
			$conn_type = 'UInt64';
		} elsif ( index($definition, 'int unsigned') != -1 ) {
			$cpp = 'unsigned int';
			$conn_type = 'UInt';
		} elsif ( index($definition, 'int') != -1 ) {
			$cpp = 'int';
			$conn_type = 'Int';
		} elsif ( index($definition, 'varchar') != -1 ) {
			$cpp = 'std::string';
			$conn_type = 'String';
		} elsif ( index($definition, 'char') != -1 ) {
			$cpp = 'std::string';
			$conn_type = 'String';
		} elsif ( index($definition, 'text') != -1 ) {
			$cpp = 'std::string';
			$conn_type = 'String';
		} elsif ( index($definition, 'varbinary') != -1 ) {
			$cpp = 'unsigned char *';
			$conn_type = 'Blob';
		} elsif ( index($definition, 'binary') != -1 ) {
			$cpp = 'unsigned char *';
			$conn_type = 'Blob';
		} elsif ( index($definition, 'blob') != -1 ) {
			$cpp = 'unsigned char *';
			$conn_type = 'Blob';
		} elsif ( index($definition, 'enum') != -1 ) {
			$cpp = 'std::string';
			$conn_type = 'String';
		} elsif ( index($definition, 'serial') != -1 ) {
			$cpp = 'unsigned long long int';
			$conn_type = 'UInt64';
		} elsif ( index($definition, 'timestamp') != -1 ) {
			$cpp = 'time_t';
			$conn_type = 'Timestamp';
		} elsif ( index($definition, 'bool') != -1 ) {
			$cpp = 'bool';
			$conn_type = 'Boolean';
		} else {
			die("Can't convert SQL '$definition' to C++\n");
		}
		
		my %column = (
			name			=>	$column,
			sql				=>	$definition,
			cpp				=>	$cpp,
			conn_type		=>	$conn_type,
			not_null		=>	$not_null,
		);
		push( @{ $info{columns} }, \%column );
		$info{columns_by_name}{$column} = \%column;
		
		printf "Column '%s':\n", $column;
		printf "\tSQL: %s\n", $definition;
		printf "\tC++ data type: %s\n", $cpp;
		printf "\tmySQL connector type: %s\n", $conn_type;
		printf "\tNull-ness: %s\n", $not_null ? 'NOT null' : 'can be null';
		
		if ( index($definition, 'auto_increment') != -1 || index($definition, 'serial') != -1 ) {
			$column{autoinc}++;
			$info{autoinc} = $column;
			printf "Auto-increment column: %s\n", $column;
		}
		
		if ( $column =~ m/[a-z]ID$/ ) {
			# convert ID to table name?
			my $method = substr($column, 0, -2);
			my $object = $method;
			
			my $filename = ucfirst($object);
			
			$object =~ s/(^|_)(\w)/ucfirst($2)/ge;

			$filename =~ s:(/|_)(\w):'/' . ucfirst($2):ge;
			
			my %navigator = (
				method		=> $method,
				object		=> $object,
				column		=> $column,
				filename	=> $filename,
			);
			
			push( @{ $info{navigators} }, \%navigator );
			printf "Possible navigator: %s() -> %s object\n", $method, $object;
		} 
	}
}

print "\n--- Sanity checking ---\n\n";

# more than one autoinc column?
my @autoincs = grep { $_->{autoinc} } @{ $info{columns} };
if (@autoincs > 1) {
	printf "!!! More than one auto_increment column:\n";
	foreach my $column (@autoincs) {
		printf "\tColumn: %s\n", $column->{name};
	}
}

# check navigators aren't self-referencial
my @checked_navigators;
my $only_key = @{ $info{keys} } == 1 ? $info{keys}->[0] : '';

foreach my $navigator ( @{ $info{navigators} } ) {
	if ( $only_key && $navigator->{column} eq $only_key && $info{columns_by_name}{$only_key}{autoinc} ) {
		printf "Ignoring primary key navigator: %s() -> %s object (us)\n", $navigator->{method}, $navigator->{object};
		next;
	}
	
	if ( $navigator->{object} eq $info{class} ) {
		printf "Ignoring self-referencial navigator: %s() -> %s object (us)\n", $navigator->{method}, $navigator->{object};
		next;
	}
	
	if ( $info{no_navigators}{ $navigator->{column} } ) {
		printf "Ignoring column explicitly listed as not to have a navigator: %s\n", $navigator->{column};
		next;
	}
	
	if ( grep { $_->{navigator} eq $navigator->{method} } @{ $info{children} } ) {
		printf "Ignoring navigator defined by CHILD_OBJECT(S) macro: %s\n", $navigator->{column};
		next;
	}

	push( @checked_navigators, $navigator );
}
$info{navigators} = \@checked_navigators;


if ( @{ $info{search_modifiers} } && !$info{search_prep} ) {
	die "Found search modifiers but no SEARCHPREP?\n";
}

if ( $info{search_prep} && !$info{search_prep_super} ) {
	die "Found SEARCHPREP but missing SEARCHPREP_SUPER?\n";
}

if ( $info{search_prep} && !$info{search_prep_end} ) {
	die "Found SEARCHPREP but missing SEARCHPREP_END?\n";
}

if ( $info{delete_obj} && !$info{delete_children} && @{ $info{children} } ) {
	# only a warning!
	warn "Found class-special delete_obj() but missing DELETE_CHILDREN?\n";
} 

# check FULLTEXT fields exist and are "text" fields
foreach my $fulltext ( @{ $info{fulltext_fields} } ) {
	my $col = $info{columns_by_name}{$fulltext};
	
	unless ($col) {
		die "FULLTEXT field '$col->{name}' doesn't exist in CREATE TABLE?\n";
	}
	
	if ( index($col->{sql}, 'text') == -1) {
		die "FULLTEXT field '$col->{name}' isn't an SQL 'text' field?\n";
	}
}


# check keys exist as columns!
foreach my $key ( @{ $info{keys} } ) {
	unless ( $info{columns_by_name}{$key} ) {
		die "Key field '$key' isn't a known column?\n";
	}
}

print "\n--- Output ---\n\n";

# generate key columns
$info{key_columns} = [];
foreach my $column ( @{ $info{columns} } ) {
	next unless grep { $column->{name} eq $_ } @{ $info{keys} };
	
	printf "Key column: %s\n", $column->{name};
	push( @{ $info{key_columns} }, $column );
}

my $data = join('', <DATA>);
my ($hpp_template, $hxx_outside_template, $hxx_inside_template, $cxx_template) = split('__DATA__', $data);

my $renderer = new Indigo::Renderer;

unless( -r "$prefix.hpp") {
	open(HPP, '>', "$prefix.hpp");
	print HPP $renderer->render( \$hpp_template, \%info );
	close(HPP);
}

mkdir( "$opt{d}/$dirname" ) unless -d "$opt{d}/$dirname";

open(HXXO, '>', "$opt{d}/$prefix-outside.hxx");
print HXXO $renderer->render( \$hxx_outside_template, \%info );
close(HXXO);

open(HXXI, '>', "$opt{d}/$prefix-inside.hxx");
print HXXI $renderer->render( \$hxx_inside_template, \%info );
close(HXXI);

open(CXX, '>', "$opt{d}/$prefix.cxx");
print CXX $renderer->render( \$cxx_template, \%info );
close(CXX);






__DATA__
// generated

#ifndef __OBJECT__<%=$define_name%>
#define __OBJECT__<%=$define_name%>

#include "<%=$prefix%>-outside.hxx"

// our class definition
class <%=$class%>: public IO::Object {

#include "<%=$prefix%>-inside.hxx"

};


#endif
__DATA__
// object "outside" .hxx template

#include "IDB/IDB.h"
#include "IO/Object.h"

#ifdef STATIC
#undef STATIC
#endif
#define STATIC static

// class definitions needed by this class
<% foreach my $navigator (@navigators) { %>
class <%=$navigator->{object}%>;
#include "<%=$navigator->{filename}%>.hpp"
<% } %>

// child objects
<% foreach my $child (@children) { %>
class <%=$child->{object}%>;
#include "<%=$child->{filename}%>.hpp"
<% } %>

__DATA__
// object "inside" .hxx template

	private:
		// search modifier variables
		<% foreach my $mod (@search_modifiers) { %>
			bool _SM_<%=$mod->{name}%>_p;
			<%=$mod->{type}%> _SM_<%=$mod->{name}%>;
		<% } %>

		// our columns
		<% foreach my $col (@columns) { %>
			<%=$col->{cpp}%> _<%=$col->{name}%>;
			bool _<%=$col->{name}%>_exists;
			bool _<%=$col->{name}%>_defined;
			bool _<%=$col->{name}%>_changed;
		<% } %>

		// generic order_by support
		std::string _order_by;
	
	// methods
	
	private:
		// common method to initialize a new object
		void _init();
		// common method to initialize column values for an object
		void _init_columns();

		// common method to copy data from an SQL result set into our object
		void _copy_from_res(IDB::ResultSet *res);

		// method to generate generic search WHERE criteria based on columns with values
		IDB::Where *_search_prep_columns();
		
		// method to generate generic join ON criteria based on columns
		IDB::Where *_search_prep_join(std::map<std::string, std::string> *col_to_table);
		
		// method to do heavy lifting unique to this object for real search_prep() method
		IO::PreppedSearch *_search_prep(IDB::Options *options, std::vector<IO::Object *> *additional);

		// method to do heavy lifting unique to this object for real save() method
		void _save();
		
		// method to do heavy lifting unique to this object for real delete_obj() method
		void _delete_obj();
		
		<% if (@children) { %>
			// method to do heavy lifting of deleting child objects
			void _delete_children();
		<% } %>

		// special constructor for internal use that doesn't clean column values
		<%=$class%>( IDB::ResultSet *res );

	public:
		// our enum of columns
		typedef enum {
			<% foreach my $col (@columns) { %>
				COL_<%=$col->{name}%>,
			<% } %>
		} <%=$class%>_columns_t;
		static const std::string <%=$class%>_column_names[];
	
		// our table
		std::string _table();
	
		// generic constructor
		<%=$class%>();
		
		// constructor that uses columns from another object
		<%=$class%>(IO::Object *other_obj);

		// destructor
		virtual ~<%=$class%>();


		// column accessor methods
		<% foreach my $col (@columns) { %>
			void <%=$col->{name}%>(<%=$col->{cpp}%> new_value);
			inline <%=$col->{cpp}%> <%=$col->{name}%>() {
				return _<%=$col->{name}%>;
			};
			void remove_<%=$col->{name}%>();
			void undef_<%=$col->{name}%>();
			bool defined_<%=$col->{name}%>();
			bool exists_<%=$col->{name}%>();
			bool changed_<%=$col->{name}%>();
		<% } %>

		
		// navigator methods
		// these can't be named the same as the object they navigate to due to C++ conflict
		<% foreach my $navigator (@navigators) { %>
			<%=$navigator->{object}%> *<%=$navigator->{method}%>();
		<% } %>
		// children
		<% foreach my $child (@children) { %>
			<%=$child->{object}%> *<%=$child->{navigator}%>();
		<% } %>
		

		// generic column testing by name
		bool has_field(std::string field);
		bool exists_by_name(std::string field);
		bool defined_by_name(std::string field);
		bool is_key_by_name(std::string field);


		// get specific column typed value by name
		<% while( my ($conn_type, $cpp) = each %conn_type_to_cpp ) { %>
			<%=$cpp%> get_<%=$conn_type%>_by_name(std::string field);
		<% } %>

		// method to clear all fields of object
		void clear();
			
		// method to generate a clone of object
		<%=$class%> *clone();

		// method to generate empty object but with keys filled in
		// (like a clone but only keys)
		<%=$class%> *skeleton();

		// method to load this object via explicit keys
		static <%=$class%> *load( <%= join(', ', map { "$_->{cpp} $_->{name}" } @key_columns) %> );

		// method to load this object via a WHERE clause
		static <%=$class%> *load(IDB::Where *where_clause);
		
		// method to load this object via key values from columns in another object
		static <%=$class%> *load(IO::Object *other_obj);

		// method to load ALL objects from database as a vector
		static std::vector<<%=$class%> *> load_all_vector();

		// reload this object from database based on keys
		void refresh();

		// "present" is like search(...) followed by result() - returns first matching record (if any)
		<%=$class%> *present();
		<%=$class%> *present(IDB::Options *options, std::vector<IO::Object *> *additional);
		// present_or_self either finds a match or just returns the calling object
		<%=$class%> *present_or_self();

		// return first/next matching record or null if none left
		<%=$class%> *result();

		// return a vector of all matching records
		std::vector<<%=$class%> *> results_vector();
		
		// search modifiers
		<% foreach my $mod (@search_modifiers) { %>
			void <%=$mod->{name}%>(<%=$mod->{type}%> v);
		<% } %>
		
		// ordering modifiers
		void order_by( <%=$class%>_columns_t col, order_direction_t dir );
		
		<% if ($search_prep) { %>
			IO::PreppedSearch *search_prep(IDB::Options *options, std::vector<IO::Object *> *additional);
		<% } %>
				
		// other methods
		<% foreach my $method (@methods) { %>
			<%=$method->{returns}%> <%=$method->{name}%>(<%=$method->{args}%>);
		<% } %>
		
		static bool check_db_shape();
		
		// lock this record
		void lock_record();
__DATA__
// object .cxx include file template

#include "<%=$prefix%>.hpp"

#ifdef DEBUG_WITH_DMALLOC
#include "dmalloc.h"
#endif

#define FULLTEXT_FIELD(field)

#define SEARCHMOD(name, type)
#define SEARCHMOD_IS_SET(name) _SM_ ## name ## _p
#define SEARCHMOD_VALUE(name) _SM_ ## name
#define SEARCHPREP IO::PreppedSearch *<%=$class%>::search_prep(IDB::Options *options, std::vector<IO::Object *> *additional)
#define SEARCHPREP_SUPER IO::PreppedSearch *ps = this->_search_prep(options, additional);
#define SEARCHPREP_ADD(new_clause) ps->where = ps->where == IDB_NO_WHERE ? new_clause : new IDB::sqlAnd( ps->where, new_clause )
#define SEARCHPREP_END return ps;
#define SEARCHPREP_FULLTEXT(field, value)

#define CHILD_OBJECT(name, navigator)
#define CHILD_OBJECTS(name, navigator)
#define DELETE_CHILDREN _delete_children()

#define NO_NAVIGATOR(field)

#ifdef STATIC
#undef STATIC
#endif
#define STATIC


// SAME ORDER AS .hxx FILE PLEASE!!


// PRIVATE METHODS


// common method to initialize a new object
void <%=$class%>::_init() {
	// init results to null
	results = NULL;

	// initialize search modifiers
	<% foreach my $mod (@search_modifiers) { %>
		_SM_<%=$mod->{name}%>_p = false;
	<% } %>
}


void <%=$class%>::_init_columns() {
	// initialize columns
	<% foreach my $col (@columns) { %>
		_<%=$col->{name}%>_exists = false;
		_<%=$col->{name}%>_defined = false;
		_<%=$col->{name}%>_changed = false;
		_<%=$col->{name}%> = <%=$cpp_default{ $col->{cpp} }%>;
	<% } %>
}


// common method to copy data from an SQL result set into our object
void <%=$class%>::_copy_from_res(IDB::ResultSet *res) {
	<% for(my $i=0; $i<@columns; $i++) { %>
		<% my $col = $columns[$i] %>
		if ( res->isNull( <%=$i+1%> ) ) {
			this->undef_<%=$col->{name}%>();
		} else {
			this-><%=$col->{name}%>( res->get<%=$col->{conn_type}%>( <%=$i+1%> ) );
		}
		_<%=$col->{name}%>_changed = false;
	<% } %>
}


// method to generate generic search WHERE criteria based on columns with values
IDB::Where *<%=$class%>::_search_prep_columns() {
	IDB::Where					*where_clause = IDB_NO_WHERE;
	IDB::Where					*new_clause;

	<% foreach my $col (@columns) { %>
		if (_<%=$col->{name}%>_exists) {
			if (_<%=$col->{name}%>_defined) {
				<% if ($col->{conn_type} eq 'Timestamp') { %>
					new_clause = new IDB::sqlEq<%=$timestamp_t%>( "<%=$table%>.<%=$col->{name}%>", IDB::Engine::from_unixtime(_<%=$col->{name}%>) );
				<% } else { %>
					new_clause = new IDB::sqlEq<%=$col->{conn_type}%>( "<%=$table%>.<%=$col->{name}%>", _<%=$col->{name}%> );
				<% } %>		
			} else {
				new_clause = new IDB::sqlIsNull( "<%=$table%>.<%=$col->{name}%>" );
			}

			if (where_clause == IDB_NO_WHERE) {
				where_clause = new_clause;
			} else {
				where_clause = new IDB::sqlAnd( where_clause, new_clause );
			}
		}
	<% } %>

	return where_clause;
}


// method to generate generic join ON criteria based on columns
IDB::Where *<%=$class%>::_search_prep_join(std::map<std::string, std::string> *col_to_table) {
	IDB::Where									*on_clause = IDB_NO_WHERE;
	std::map<std::string, std::string>::iterator	it;

	<% foreach my $col (@columns) { %>
		<% next unless grep { $_ eq $col->{name} } @keys %>

		it = col_to_table->find("<%=$col->{name}%>");
		if (it != col_to_table->end()) {
			std::string col_name = it->second;
			col_name += ".<%=$col->{name}%>";
			IDB::Where *new_clause = new IDB::sqlEqCol( col_name, "<%=$table%>.<%=$col->{name}%>" );

			if (on_clause == IDB_NO_WHERE) {
				on_clause = new_clause;
			} else {
				on_clause = new IDB::sqlAnd( on_clause, new_clause );
			}
		}
	<% } %>

	return on_clause;
}


// method to do heavy lifting unique to this object for real search_prep() method
IO::PreppedSearch *<%=$class%>::_search_prep(IDB::Options *options, std::vector<IO::Object *> *additional) {
	IO::PreppedSearch							*ps = new IO::PreppedSearch();
	IDB::Tables									*tables = new IDB::Tables("<%=$table%>");
	IDB::Where									*where_clause = IDB_NO_WHERE;
	IDB::Where									*new_clause;
	std::map<std::string, std::string>			col_to_table;

	where_clause = this->_search_prep_columns();

	<% foreach my $col (@columns) { %>
		col_to_table["<%=$col->{name}%>"] = "<%=$table%>";
	<% } %>
	
	if (additional) {
		std::vector<IO::Object *>::iterator	it;
		IDB::Where							*on_clause = IDB_NO_WHERE;
	
		for(it = additional->begin(); it != additional->end(); it++) {
			IO::PreppedSearch *additional_ps = (*it)->search_prep(IDB_NO_OPTIONS, (std::vector<IO::Object *> *) NULL);

			/* join additional using columns from map */
			on_clause = (*it)->_search_prep_join(&col_to_table);
			tables->join("join", (*it)->_table(), on_clause);
			
			/* add additional columns to where */
			new_clause = additional_ps->where;

			if (new_clause != IDB_NO_WHERE) {
				if (where_clause != IDB_NO_WHERE) {
					where_clause = new IDB::sqlAnd( where_clause, new_clause );
				} else {
					where_clause = new_clause;
				}
			}

			// don't delete where clause - we're using it
			additional_ps->where = IDB_NO_WHERE;
			delete additional_ps;
		}
	}

	ps->cols = new std::vector<std::string>();
	/* use distinct results in case additional objects cause multiple rows to be returned for object requested */
	ps->cols->push_back("distinct <%=$table%>.*");

	ps->tables = tables;
	ps->where = where_clause;

	ps->options = new IDB::Options();
	<% while (my ($option, $value) = each %search_options) { %>
		<% if ($option eq 'having') { %>
			ps->options->having = IDB::sqlLiteral("<%=$value%>");
		<% } elsif ($option eq 'limit' || $option eq 'offset') { %>
			ps->options-><%=$option%> = <%=$value%>;
		<% } else { %>
			ps->options-><%=$option%> = "<%=$value%>";
		<% } %>
	<% } %>

	// object's limit & offset applied here but can be overridden by other searchmods
	if ( limit() )
		ps->options->limit = limit();
	if ( offset() )
		ps->options->offset = offset();

	// generic order_by support (can be overridden below)
	if ( !_order_by.empty() )
		ps->options->order_by = _order_by;

	if (options && options != IDB_NO_OPTIONS) {
		if (options->limit) {
			ps->options->limit = options->limit;
		}
		if (options->offset) {
			ps->options->offset = options->offset;
		}
		if (options->having) {
			ps->options->having = options->having;
		}
		if (!options->group_by.empty()) {
			ps->options->group_by = options->group_by;
		}
		if (!options->order_by.empty()) {
			ps->options->order_by = options->order_by;
		}
	}

	return ps;
}


// method to do heavy lifting unique to this object for real save() method
void <%=$class%>::_save() {
	std::vector<IDB::Where *>	updates;
	unsigned int				n_updates = 0;

	<% foreach my $col (@columns) { %>
		/* keys dealt with later on */
		<% next if grep { $_ eq $col->{name} } @keys %>

		/* add <%=$col->{name}%> to record if exists */
		#ifdef MINIMAL_SAVE
			if (_<%=$col->{name}%>_changed) {
		#endif
				if (_<%=$col->{name}%>_exists) {
					if (_<%=$col->{name}%>_defined) {
						<% if ($col->{conn_type} eq 'Timestamp') { %>
							updates.push_back( new IDB::sqlEq<%=$timestamp_t%>( "<%=$col->{name}%>", IDB::Engine::from_unixtime(_<%=$col->{name}%>) ) );
						<% } else { %>
							updates.push_back( new IDB::sqlEq<%=$col->{conn_type}%>( "<%=$col->{name}%>", _<%=$col->{name}%> ) );
						<% } %>		
					} else {
						updates.push_back( new IDB::sqlEqNull( "<%=$col->{name}%>" ) );
					}
				}
		#ifdef MINIMAL_SAVE
			}
		#endif				
	<% } %>

	/* keys: <%=join(' ', @keys)%> */
	<% foreach my $col (@columns) { %>
		<% next unless grep { $_ eq $col->{name} } @keys %>

		if (_<%=$col->{name}%>_exists) {
			if (_<%=$col->{name}%>_defined) {
				/* add <%=$col->{name}%> to updates */
				updates.push_back( new IDB::sqlEq<%=$col->{conn_type}%>( "<%=$col->{name}%>", _<%=$col->{name}%> ) );
			}
		}
	<% } %>

	/* do save */
	idbe()->writerow("<%=$table%>", updates);

	/* clean updates */
	for(int i = 0; i < updates.size(); i++) {
		IDB::Where	*where = updates[i];
		delete where;
	}

	/* reset changed-ness */
	<% foreach my $col (@columns) { %>
		_<%=$col->{name}%>_changed = false;
	<% } %>	

	/* autoinc support */
	<% if ($autoinc) { %>
		if (!_<%=$autoinc%>_exists || !_<%=$autoinc%>_defined) {
			this-><%=$autoinc%>( idbe()->fetchInt("last_insert_id()", IDB_NO_TABLES, IDB_NO_WHERE, IDB_NO_OPTIONS) );
		}
	<% } %>
};


// special private constructor for internal use that doesn't clean column values
<%=$class%>::<%=$class%>( IDB::ResultSet *res ): IO::Object() {
	this->_init();
	this->_copy_from_res( res );
};


// PUBLIC METHODS
const std::string <%=$class%>::<%=$class%>_column_names[] = {
	<% foreach my $col (@columns) { %>
		"<%=$col->{name}%>",
	<% } %>
};

// our table
std::string <%=$class%>::_table() {
	return "<%=$table%>";
}


// generic constructor
<%=$class%>::<%=$class%>() {
	this->_init_columns();
	this->_init();
};


// constructor that uses columns from another object (must be key field in other object)
<%=$class%>::<%=$class%>(IO::Object *other_obj): IO::Object() {
	this->_init();

	<% foreach my $col (@columns) { %>
		if ( other_obj->is_key_by_name("<%=$col->{name}%>") )
			if ( other_obj->exists_by_name("<%=$col->{name}%>") )
				if ( other_obj->defined_by_name("<%=$col->{name}%>") )
					this-><%=$col->{name}%>( other_obj->get_<%=$col->{conn_type}%>_by_name("<%=$col->{name}%>") );
				else
					this->remove_<%=$col->{name}%>();
			else
				this->remove_<%=$col->{name}%>();
		else
			this->remove_<%=$col->{name}%>();
	<% } %>
};


// destructor
<%=$class%>::~<%=$class%>() {
	if (results)
		delete results;
}


// column accessor methods
<% foreach my $col (@columns) { %>
	void <%=$class%>::<%=$col->{name}%>(<%=$col->{cpp}%> new_value) {
		_<%=$col->{name}%>_exists = true;
		_<%=$col->{name}%>_defined = true;
		_<%=$col->{name}%>_changed = true;
		_<%=$col->{name}%> = new_value;
	}
	
	// inlined: moved to .hxx file
	// <%=$col->{cpp}%> <%=$col->{name}%>()
	 
	void <%=$class%>::remove_<%=$col->{name}%>() {
		_<%=$col->{name}%>_exists = false;
		_<%=$col->{name}%>_defined = false;
		_<%=$col->{name}%>_changed = true;
		_<%=$col->{name}%> = <%=$cpp_default{ $col->{cpp} }%>;
	}
	
	void <%=$class%>::undef_<%=$col->{name}%>() {
		_<%=$col->{name}%>_exists = true;
		_<%=$col->{name}%>_defined = false;
		_<%=$col->{name}%>_changed = true;
		_<%=$col->{name}%> = <%=$cpp_default{ $col->{cpp} }%>;
	}
	
	bool <%=$class%>::defined_<%=$col->{name}%>() {
		return _<%=$col->{name}%>_defined;
	}
	
	bool <%=$class%>::exists_<%=$col->{name}%>() {
		return _<%=$col->{name}%>_exists;
	}
	
	bool <%=$class%>::changed_<%=$col->{name}%>() {
		return _<%=$col->{name}%>_changed;
	}
<% } %>


// navigator methods
<% foreach my $navigator (@navigators) { %>
	<%=$navigator->{object}%> *<%=$class%>::<%=$navigator->{method}%>() {
		<% my $conn_type = $columns_by_name{ $navigator->{column} }{conn_type} %>
		<% if ($conn_type eq 'Timestamp') { %>
			return <%=$navigator->{object}%>::load( new IDB::sqlEq<%=$timestamp_t%>( "<%=$navigator->{column}%>", $IDB::Engine::from_unixtime( _<%=$navigator->{column}%> ) ) );
		<% } else { %>
			return <%=$navigator->{object}%>::load( new IDB::sqlEq<%=$conn_type%>( "<%=$navigator->{column}%>", _<%=$navigator->{column}%> ) );
		<% } %>
	}
<% } %>

<% foreach my $child (@children) { %>
	<%=$child->{object}%> *<%=$class%>::<%=$child->{navigator}%>() {
		<% if ($child->{many}) { %>
			return new <%=$child->{object}%>( this );
		<% } else { %>
			return <%=$child->{object}%>::load( this );
		<% } %>
	}
<% } %>


// run-time safe!
bool <%=$class%>::has_field(std::string field) {
	<% foreach my $col (@columns) { %>
		if (!field.compare("<%=$col->{name}%>")) {
			return true;
		}
	<% } %>

	return false;
}


// run-time safe!
bool <%=$class%>::exists_by_name(std::string field) {
	<% foreach my $col (@columns) { %>
		if (!field.compare("<%=$col->{name}%>")) {
			return _<%=$col->{name}%>_exists;
		}
	<% } %>

	return false;
}


bool <%=$class%>::defined_by_name(std::string field) {
	<% foreach my $col (@columns) { %>
		if (!field.compare("<%=$col->{name}%>")) {
			return _<%=$col->{name}%>_defined;
		}
	<% } %>

	return false;
}


bool <%=$class%>::is_key_by_name(std::string field) {
	<% foreach my $col (@key_columns) { %>
		if (!field.compare("<%=$col->{name}%>"))
			return true;
	<% } %>

	return false;
}	




<% while( my ($conn_type, $cpp) = each %conn_type_to_cpp ) { %>
	<%=$cpp%> <%=$class%>::get_<%=$conn_type%>_by_name(std::string field) {
		<% foreach my $col (@columns) { %>
			<% next unless $col->{conn_type} eq $conn_type %>

			if (!field.compare("<%=$col->{name}%>")) {
				return _<%=$col->{name}%>;
			}
		<% } %>

		std::cerr << "Unimplemented get<%=$conn_type%>_by_name() call for " << field << std::endl;
		return <%=$cpp_default{ $cpp }%>;
	}
<% } %>


void <%=$class%>::clear() {
	if (results)
		delete results;
		
	_init();
	_init_columns();
}


<%=$class%> *<%=$class%>::clone() {
	<%=$class%> *c = new <%=$class%>();
	
	<% foreach my $col (@columns) { %>
		if ( _<%=$col->{name}%>_defined )
			c-><%=$col->{name}%>( _<%=$col->{name}%> );
	<% } %>

	return c;
}


<%=$class%> *<%=$class%>::skeleton() {
	<%=$class%> *skel = new <%=$class%>();
	
	<% foreach my $col (@columns) { %>
		<% next unless grep { $_ eq $col->{name} } @keys %>
		skel-><%=$col->{name}%>( _<%=$col->{name}%> );
	<% } %>

	return skel;
}


<%=$class%> *<%=$class%>::load( <%= join(', ', map { "$_->{cpp} $_->{name}" } @key_columns) %> ) {
	IDB::Where *where_clause = NULL;
	
	<% foreach my $key_col ( @key_columns ) { %>
		 <% if ($key_col == $key_columns[0]) { %>
		 	where_clause = new IDB::sqlEq<%=$key_col->{conn_type}%>( "<%=$key_col->{name}%>", <%=$key_col->{name}%> );
		 <% } else { %>
		 	where_clause = new IDB::sqlAnd( where_clause, new IDB::sqlEq<%=$key_col->{conn_type}%>( "<%=$key_col->{name}%>", <%=$key_col->{name}%> ) );
		 <% } %>
	<% } %>
	
	return load( where_clause );
};


<%=$class%> *<%=$class%>::load(IDB::Where *where_clause) {
	std::vector<std::string>		cols;
	IDB::Tables						*tables = new IDB::Tables("<%=$table%>");
	IDB::ResultSet					*res;

	cols.push_back("*");

	/* select * from table where_clause */
	res = idbe()->select(&cols, tables, where_clause, IDB_NO_OPTIONS);
	delete tables;
	// Watch out! Don't forget this little line is in place!
	delete where_clause;

	if (res->next()) {
		/* copy columns */
		// use special private constructor
		<%=$class%> *loaded_obj = new <%=$class%>( res );
		delete res;
		return loaded_obj;
	}

	delete res;
	return (<%=$class%> *)0;
};

/* OLD BUT WORKING VERSION:
<%=$class%> *<%=$class%>::load(IO::Object *other_obj) {
	<%=$class%> *search_obj = new <%=$class%>(other_obj);
	<%=$class%> *loaded_obj;

	loaded_obj = search_obj->present();
	delete search_obj;

	return loaded_obj;
};
*/

/* NEW, FASTER VERSION: */
<%=$class%> *<%=$class%>::load(IO::Object *other_obj) {
	// all key columns must exist and be defined (i.e. not undef/null)
	<% foreach my $key_col ( @key_columns ) { %>
		if ( ! other_obj->defined_by_name( "<%=$key_col->{name}%>" ) )
			return NULL;
	<% } %>
	
	return load( <%= join(', ', map { 'other_obj->get_' . $_->{conn_type} . '_by_name( "' . $_->{name} . '" )' } @key_columns) %> );
};


std::vector<<%=$class%> *> <%=$class%>::load_all_vector() {
	std::vector<<%=$class%> *> results;

	<%=$class%> me;
	me.search();
	
	while( <%=$class%> *result = me.result() ) {
		results.push_back( result );	
	}

	return results;
};



void <%=$class%>::refresh() {
	std::vector<std::string>		cols;
	IDB::Tables						*tables = new IDB::Tables("<%=$table%>");
	IDB::Where						*where_clause = IDB_NO_WHERE;
	IDB::Where						*new_clause;
	IDB::ResultSet					*res;
	
	cols.push_back("*");

	<% foreach my $col (@columns) { %>
		<% next unless grep { $_ eq $col->{name} } @keys %>

		<% if ($col->{conn_type} eq 'Timestamp') { %>
			new_clause = new IDB::sqlEq<%=$timestamp_t%>( "<%=$col->{name}%>", IDB::Engine::from_unixtime( _<%=$col->{name}%> ) );
		<% } else { %>
			new_clause = new IDB::sqlEq<%=$col->{conn_type}%>( "<%=$col->{name}%>", _<%=$col->{name}%> );
		<% } %>

		if (where_clause == IDB_NO_WHERE) {
			where_clause = new_clause;
		} else {
			where_clause = new IDB::sqlAnd( where_clause, new_clause );
		}
	<% } %>

	res = idbe()->select(&cols, tables, where_clause, IDB_NO_OPTIONS);
	delete tables;
	delete where_clause;

	if (res->next()) {
		this->_copy_from_res(res);
	}

	delete res;
};

<% if (@children) { %>
	// heavy lifting for deleting children
	void <%=$class%>::_delete_children() {
		<% for(my $i=0; $i<@children; $i++) { %>
			<% my $child = $children[$i] %>
			<%=$child->{object}%> *children<%=$i%> = this-><%=$child->{navigator}%>();
			<% if ($child->{many}) { %>
				children<%=$i%>->search_and_destroy();
			<% } else { %>
				children<%=$i%>->delete_obj();
			<% } %>
			delete children<%=$i%>;
		<% } %>
	}
<% } %>

// heavy lifting for delete_obj()
void <%=$class%>::_delete_obj() {
	<% if (@children && !$delete_obj) { %>
		// no class-special delete_obj() method so we need to delete children ourself
		_delete_children();
	<% } %>
	
	IDB::Where			*where_clause = IDB_NO_WHERE;
	IDB::Where			*new_clause;

	<% foreach my $col (@columns) { %>
		<% next unless grep { $_ eq $col->{name} } @keys %>

		// ignore undefined keys - allows a more crude version of search-and-destroy 
		// where objects DON'T have ->delete_obj() called on them but are simply
		// deleted by database
		
		if ( _<%=$col->{name}%>_defined ) {
			<% if ($col->{conn_type} eq 'Timestamp') { %>
				new_clause = new IDB::sqlEq<%=$timestamp_t%>( "<%=$col->{name}%>", IDB::Engine::from_unixtime( _<%=$col->{name}%> ) );
			<% } else { %>
				new_clause = new IDB::sqlEq<%=$col->{conn_type}%>( "<%=$col->{name}%>", _<%=$col->{name}%> );
			<% } %>
	
			if (where_clause == IDB_NO_WHERE) {
				where_clause = new_clause;
			} else {
				where_clause = new IDB::sqlAnd( where_clause, new_clause );
			}
		}
	<% } %>

	idbe()->deleterow("<%=$table%>", where_clause);
	delete where_clause;
};


<%=$class%> *<%=$class%>::present() { return this->present(IDB_NO_OPTIONS, (std::vector<IO::Object *> *) NULL ); }

<%=$class%> *<%=$class%>::present(IDB::Options *options, std::vector<IO::Object *> *additional) {
	IO::PreppedSearch		*ps;
	IDB::ResultSet			*res;
	IDB::Options			*tmpOptions = IDB_NO_OPTIONS;

	ps = this->search_prep(options, additional);

	if (!ps->options || ps->options == IDB_NO_OPTIONS) {
		tmpOptions = new IDB::Options();
		ps->options = tmpOptions;
	}

	ps->options->limit = 1;

	res = idbe()->select(ps->cols, ps->tables, ps->where, ps->options);

	if (tmpOptions) {
		delete tmpOptions;
	}

	delete ps;

	if (res->next()) {
		<%=$class%> *loaded_obj = new <%=$class%>( res );
		delete res;
		return loaded_obj;
	}

	delete res;
	return (<%=$class%> *)0;
}


<%=$class%> *<%=$class%>::present_or_self() { 
	<%=$class%> *found = this->present(IDB_NO_OPTIONS, 0);
	
	if (found)
		return found;
	else
		return this;
}


<%=$class%> *<%=$class%>::result() {
	if (results) {
		if (results->next()) {
			return new <%=$class%>( results );
		}
		
		delete results;
		results = NULL;
	}
	
	return (<%=$class%> *)0;
}


std::vector<<%=$class%> *> <%=$class%>::results_vector() {
	std::vector<<%=$class%> *> output_vector;

	while( <%=$class%> *vector_entry = result() ) {
		output_vector.push_back( vector_entry );	
	}

	return output_vector;
}

		
// search modifiers
<% foreach my $mod (@search_modifiers) { %>
	void <%=$class%>::<%=$mod->{name}%>(<%=$mod->{type}%> v) { _SM_<%=$mod->{name}%>_p = true; _SM_<%=$mod->{name}%> = v; }
<% } %>


// order by
void <%=$class%>::order_by( <%=$class%>_columns_t col, order_direction_t dir ) {
	_order_by = <%=$class%>_column_names[col] + " " + order_direction_names[dir];
}


// check database shape matches code
bool <%=$class%>::check_db_shape() {
	bool shape_OK = true;

	std::vector<std::string> cols;
	cols.push_back("*");

	IDB::Tables *tables = new IDB::Tables( "INFORMATION_SCHEMA.COLUMNS" );

	IDB::Where *where_schema = new IDB::sqlEqCol( "table_schema", "database()" );
	IDB::Where *where_table = new IDB::sqlEqString( "table_name", "<%=$table%>" );
	
	IDB::Where *where = new IDB::sqlAnd( where_schema, where_table );

	IDB::ResultSet *res = idbe()->select(&cols, tables, where, IDB_NO_OPTIONS);

	<% for(my $i=0; $i<@columns; $i++) { %>
		<% my $col = $columns[$i] %>

		if ( res->next() ) {
			if ( res->getString( 4 ) != "<%=$col->{name}%>" ) {
				std::cerr << "<%=$table%> column #<%=$i+1%> should be '<%=$col->{name}%>' but mySQL returns '" << res->getString(4) << "'" << std::endl;
				shape_OK = false;
			}
		} else {
			std::cerr << "<%=$table%> column #<%=$i+1%> should be '<%=$col->{name}%>' but mySQL ran out of columns!" << std::endl;
			shape_OK = false;
		}
	<% } %>

	return shape_OK;
}


// lock this database record
void <%=$class%>::lock_record() {
	// SELECT true FROM <table> WHERE <keys> FOR UPDATE
	std::vector<std::string> cols;
	cols.push_back("true");

	IDB::Tables *tables = new IDB::Tables("<%=$table%>");

	IDB::Where *where_clause = NULL;
	
	<% foreach my $key_col ( @key_columns ) { %>
		 <% if ($key_col == $key_columns[0]) { %>
		 	where_clause = new IDB::sqlEq<%=$key_col->{conn_type}%>( "<%=$key_col->{name}%>", _<%=$key_col->{name}%> );
		 <% } else { %>
		 	where_clause = new IDB::sqlAnd( where_clause, new IDB::sqlEq<%=$key_col->{conn_type}%>( "<%=$key_col->{name}%>", _<%=$key_col->{name}%> ) );
		 <% } %>
	<% } %>

	IDB::Options *options = new IDB::Options;
	options->for_update = true;
	
	IDB::ResultSet *res = idbe()->select(&cols, tables, where_clause, options);
	
	delete res;

	delete options;
	delete where_clause;
	delete tables;
}

