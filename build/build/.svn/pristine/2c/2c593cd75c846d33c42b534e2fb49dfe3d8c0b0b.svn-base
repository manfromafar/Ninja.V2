#include "WebSocket.hpp"

#include <iostream>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#ifdef DEBUG_WITH_DMALLOC
#include "dmalloc.h"
#endif



WebSocket::WebSocket() {
	fin = rsv1 = rsv2 = rsv3 = mask = false;
	payload_data = NULL;
	payload_len = 0;
	opcode = WS_CONT;
}


uint64_t WebSocket::unpack(unsigned char *buffer, uint64_t buffer_len) {
	if (buffer_len < 1)
		return 0;

	// debugging
	#ifdef WS_UNPACK_DEBUG
		for(int i=0; i<buffer_len; i+=16) {
			fprintf(stderr, "%08x  ", i);
			for(int j=0; j<16 && i+j<buffer_len; j++) {
				fprintf(stderr, "%02x ", (uint8_t)buffer[i+j]);
			}
			fprintf(stderr, "  ");
			for(int j=0; j<16 && i+j<buffer_len; j++) {
				uint8_t c = buffer[i+j];
				fprintf(stderr, "%c", (c>=32 && c<=126 ? c : '.'));
			}
			fprintf(stderr, "\n");
			fflush(stderr);
		}
	#endif

	fin = !!(buffer[0] & 0x80);
	opcode = buffer[0] & 0x0f;

	if (buffer_len < 2)
		return 0;

	mask = !!(buffer[1] & 0x80);
	payload_len = buffer[1] & 0x7f;

	uint64_t offset = 2;

	if (payload_len == 126) {
		if (buffer_len < offset+2)
			return 0;

		payload_len = ntohs( *(uint16_t *)(&buffer[offset]) );
		offset += 2;
	} else if (payload_len == 127) {
		if (buffer_len < offset+8)
			return 0;

		// websocket framing is MSB so first 32bits are upper
		payload_len = ntohl( *(uint32_t *)(&buffer[offset]) );
		payload_len <<= 32;
		offset += 4;
		payload_len += ntohl( *(uint32_t *)(&buffer[offset]) );
		offset += 4;
	}

	if (mask) {
		if (buffer_len < offset+4)
			return 0;

		masking_key = ntohl( *(uint32_t *)(&buffer[offset]) );
		offset += 4;
	}

	if (buffer_len < offset+payload_len)
		return 0;

	payload_data = (unsigned char *)malloc(payload_len);
	memcpy(payload_data, &buffer[offset], payload_len);

	if (mask) {
		uint8_t *masking_key_p = (uint8_t *)&masking_key;

		for(uint64_t i=0; i<payload_len; i++) {
			payload_data[i] = payload_data[i] ^ masking_key_p[3 - (i % 4)];
		}
	}

	if (opcode == WS_CLOSE && payload_len == 2) {
		close_code = ntohs( *(uint16_t *)payload_data );
	}

	offset += payload_len;

	return offset;
}


bool WebSocket::pack(unsigned char *buffer, uint64_t *buffer_len, uint64_t *payload_offset) {
	memset(buffer, 0, *buffer_len);

	uint64_t max_payload = (*buffer_len) - 2;

	if (max_payload - 8 > 65535)
		max_payload -= 8;
	else if (max_payload - 2 >= 126)
		max_payload -= 2;

	uint64_t payload_this_buffer = payload_len - *payload_offset;

	// fin: rough guess
	buffer[0] |= (payload_this_buffer <= max_payload) ? 0x80 : 0x00;
	// opcode
	buffer[0] |= opcode & 0x0f;

	// mask not allowed

	if (payload_this_buffer > max_payload)
		payload_this_buffer = max_payload;

	uint64_t buffer_offset = 2;

	if (payload_this_buffer < 126)
		buffer[1] |= payload_this_buffer & 0x7f;
	else if (payload_this_buffer <= 65535) {
		buffer[1] |= 126;
		*(uint16_t *)(&buffer[buffer_offset]) = htons(payload_this_buffer);
		buffer_offset += 2;
	} else {
		buffer[1] |= 127;
		// MSB so top 32 bits first
		*(uint32_t *)(&buffer[buffer_offset]) = htonl(payload_this_buffer >> 32);
		buffer_offset += 4;
		*(uint32_t *)(&buffer[buffer_offset]) = htonl(payload_this_buffer & 0xFFFFFFFF);
		buffer_offset += 4;
	}

	memcpy(&buffer[buffer_offset], &payload_data[*payload_offset], payload_this_buffer);

	buffer_offset += payload_this_buffer;
	*payload_offset += payload_this_buffer;

	*buffer_len = buffer_offset;

	// debugging
	#ifdef WS_PACK_DEBUG
		for(int i=0; i<buffer_offset; i+=16) {
			fprintf(stderr, "%08x  ", i);
			for(int j=0; j<16 && i+j<buffer_offset; j++) {
				fprintf(stderr, "%02x ", (uint8_t)buffer[i+j]);
			}
			fprintf(stderr, "  ");
			for(int j=0; j<16 && i+j<buffer_offset; j++) {
				uint8_t c = buffer[i+j];
				fprintf(stderr, "%c", (c>=32 && c<=126 ? c : '.'));
			}
			fprintf(stderr, "\n");
			fflush(stderr);
		}
	#endif

	return true;
}


void WebSocket::replace_payload(const unsigned char *buffer, uint64_t buffer_len) {
	if (payload_data != NULL)
		free(payload_data);

	payload_data = (unsigned char *)malloc(buffer_len);
	memcpy(payload_data, buffer, buffer_len);
	payload_len = buffer_len;
}



WebSocket::~WebSocket() {
	if (payload_data != NULL)
		free(payload_data);
}
