#include "IDB/resultset.h"
#include "IDB/engine.h"

#include <cppconn/connection.h>
#include <cppconn/driver.h>
#include <time.h>
#include <stdlib.h>

#ifdef DEBUG_WITH_DMALLOC
#include "dmalloc.h"
#endif


namespace IDB {
	sql::Connection *Engine::connection() {
		return con;
	}


	Engine::~Engine() {
		if (con != NULL)
			delete con;
	}


	void Engine::thread_end() {
		if (con != NULL) {
			delete con;
			con = NULL;
		}

		sql::Driver *driver = get_driver_instance();
		driver->threadEnd();
	}


	long long int Engine::fetchInt( std::string col, Tables *tables, Where *where, Options *options ) {
		std::vector<std::string>		cols;
		cols.push_back(col);

		std::unique_ptr<IDB::ResultSet> res( this->select(&cols, tables, where, options) );

		if (res->next()) {
			return res->getUInt64(1);
		}

		return 0;
	}


	std::string Engine::fetchString( std::string col, Tables *tables, Where *where, Options *options ) {
		std::vector<std::string>		cols;
		cols.push_back(col);

		std::unique_ptr<IDB::ResultSet> res( this->select(&cols, tables, where, options) );

		if (res->next()) {
			return res->getString(1);
		}

		return "";
	}


	IDB::ResultSet *Engine::select( std::vector<std::string> *cols, Tables *tables, Where *where, Options *options ) {
		std::string sql = "SELECT ";

		for(auto &col : *cols)
			sql += col + ", ";
		sql.pop_back();
		sql.pop_back();

		if (tables) {
			sql += " FROM " + tables->toString();
		}

		if (where) {
			sql += " WHERE " + where->toString();
		}

		if (options) {
			sql += options->toString();
		}

		try {
			std::unique_ptr<sql::PreparedStatement> pstmt( con->prepareStatement(sql) );

			unsigned int bind_offset = 1;
		
			if (tables)
				bind_offset = tables->bind(&*pstmt, bind_offset);

			if (where)
				bind_offset = where->bind(&*pstmt, bind_offset);

			if (options)
				bind_offset = options->bind(&*pstmt, bind_offset);

			return (IDB::ResultSet *) pstmt->executeQuery();
		} catch (sql::SQLException &e) {
			std::cerr << "[IDB] " << e.getErrorCode() << ": " << e.what() << std::endl;
			std::cerr << "[IDB] " << sql << std::endl;
			throw(e);
		}
	}


	int Engine::writerow(std::string table, const std::vector<IDB::Where *> &updates) {
		std::string sql = "INSERT INTO " + table + " SET ";

		for(auto &update : updates)
			sql += update->toString() + ", ";
		sql.pop_back();
		sql.pop_back();

		sql += " ON DUPLICATE KEY UPDATE ";
		for(auto &update : updates)
			sql += update->toString() + ", ";
		sql.pop_back();
		sql.pop_back();

		// if there are no columns to set/update then use special form of SQL:
		if ( updates.empty() )
			sql = "INSERT INTO " + table + " values ()";

		try {
			std::unique_ptr<sql::PreparedStatement> pstmt( con->prepareStatement(sql) );

			unsigned int bind_offset = 1;

			// part 0: SET, part 1: ON DUPLICATE KEY UPDATE
			for(unsigned int part = 0; part <= 1; part++)
				for(auto &update : updates)
					bind_offset = update->bind(&*pstmt, bind_offset);

			return pstmt->executeUpdate();
		} catch (sql::SQLException &e) {
			std::cerr << "[IDB] " << e.getErrorCode() << ": " << e.what() << std::endl;
			std::cerr << "[IDB] " << sql << std::endl;
			throw(e);
		}
	}


	int Engine::deleterow(std::string table, IDB::Where *where_clause) {
		std::string sql = "DELETE FROM " + table + " WHERE " + where_clause->toString();

		try {
			std::unique_ptr<sql::PreparedStatement> pstmt( con->prepareStatement(sql) );

			unsigned int bind_offset = 1;

			bind_offset = where_clause->bind(&*pstmt, bind_offset);

			return pstmt->executeUpdate();
		} catch (sql::SQLException &e) {
			std::cerr << "[IDB] " << e.getErrorCode() << ": " << e.what() << std::endl;
			std::cerr << "[IDB] " << sql << std::endl;
			throw(e);
		}
	}


	int Engine::execute(std::string sql) {
		try {
			std::unique_ptr<sql::Statement> stmt( con->createStatement() );

			return stmt->execute(sql);
		} catch (sql::SQLException &e) {
			std::cerr << "[IDB] " << e.getErrorCode() << ": " << e.what() << std::endl;
			std::cerr << "[IDB] " << sql << std::endl;
			throw(e);
		}
	}


	std::string Engine::from_unixtime( time_t t ) {
		char buf[40];
		struct tm tm;

		strftime(buf, sizeof(buf), "%Y%m%d%H%M%S", localtime_r( &t, &tm ) );

		return std::string( buf );
	}


	time_t Engine::unix_timestamp( std::string ts ) {
		if (ts == "0000-00-00 00:00:00")
			return (time_t) 0;

		struct tm tm;

		tm.tm_year = strtoul( ts.substr(0, 4).c_str(), NULL, 10 ) - 1900;
		tm.tm_mon = strtoul( ts.substr(5, 2).c_str(), NULL, 10) - 1;
		tm.tm_mday = strtoul( ts.substr(8, 2).c_str(), NULL, 10);
		tm.tm_hour = strtoul( ts.substr(11, 2).c_str(), NULL, 10);
		tm.tm_min = strtoul( ts.substr(14, 2).c_str(), NULL, 10);
		tm.tm_sec = strtoul( ts.substr(17, 2).c_str(), NULL, 10);

		// get mktime() to work out if DST is in effect
		tm.tm_isdst = -1;

		return mktime( &tm );
	}
}
